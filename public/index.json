[{"categories":"Snippets","contents":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 from selenium import webdriver from selenium.webdriver.chrome.options import Options import time #使用chrome的webdriver chrome_options = Options() chrome_options.add_experimental_option(\u0026#34;detach\u0026#34;, True) driver = webdriver.Chrome(options=chrome_options) # 開啟全螢幕 driver.maximize_window() #開啟google首頁 driver.get(\u0026#39;https://personal-vknq.outsystemscloud.com/Test/WebScreen3.aspx\u0026#39;) # Pagination pagination = driver.find_element(\u0026#39;xpath\u0026#39;, \u0026#39;//*[@id=\u0026#34;wt70_OutSystemsUIWeb_wt18_block_wtContent_wtMainContent_RichWidgets_wt31_block_wtPageNavigator_ctl02_wtLink8\u0026#34;]\u0026#39;) pagination.click() time.sleep(5) print(\u0026#39;2nd page 已完成\u0026#39;) # Search Keyword input_search = driver.find_element(\u0026#39;xpath\u0026#39;, \u0026#39;//*[@id=\u0026#34;wt70_OutSystemsUIWeb_wt18_block_wtContent_wtMainContent_OutSystemsUIWeb_wt13_block_wtInput_wtSearchInput\u0026#34;]\u0026#39;) input_search.send_keys(\u0026#39;some\u0026#39;) time.sleep(5) print(\u0026#39;Search已完成\u0026#39;) # Table Sort columns = [1, 3, 4] for col_num in columns: col = driver.find_element(\u0026#39;xpath\u0026#39;, \u0026#39;//*[@id=\u0026#34;wt70_OutSystemsUIWeb_wt18_block_wtContent_wtMainContent_wtTable\u0026#34;]/thead/tr/th[{}]\u0026#39;.format(col_num)) col.click() time.sleep(5) print(\u0026#39;col{}正向已完成\u0026#39;.format(col_num)) # Table Sort columns = [1, 3, 4] for col_num in columns: col = driver.find_element(\u0026#39;xpath\u0026#39;, \u0026#39;//*[@id=\u0026#34;wt70_OutSystemsUIWeb_wt18_block_wtContent_wtMainContent_wtTable\u0026#34;]/thead/tr/th[{}]\u0026#39;.format(col_num)) col.click() time.sleep(5) print(\u0026#39;col{}反向已完成\u0026#39;.format(col_num)) ","date":"Mar 29","permalink":"http://localhost:1313/post/2023-03-29-python-simple-test-selenium/","tags":"python","title":"簡單 UI Testing Script"},{"categories":"Blogging","contents":"如果在網頁上觸發按鈕執行的 stored procedure 中，執行了一個包含 SSIS 封裝的 dtsx 檔案，當你關閉網頁時，stored procedure 仍然會繼續執行。\n這是因為在 SQL Server 中，stored procedure 通常在執行時是作為一個單獨的執行緒在運行的，而這個執行緒是獨立於網頁的。\n換句話說，即使你關閉了網頁，stored procedure 仍然會在 SQL Server 上運行，直到其執行完成或被手動停止。\n因此，希望停止 stored procedure 的執行，可以使用 SQL Server Management Studio 或 Transact-SQL 命令來停止其執行，具體方法可以參考前面的回答。\n找到正在執行的 SP ID\r找到 session ID\n1 SELECT session_id FROM sys.dm_exec_requests WHERE session_id \u0026gt; 50 停止 Stored Procedure 的執行\r\u0026lt;SPID\u0026gt; 是指正在執行 stored procedure 的 session ID\n1 KILL \u0026lt;SPID\u0026gt; ","date":"Mar 28","permalink":"http://localhost:1313/post/2023-03-28-close-window-to-stop-stored-proc/","tags":"sql","title":"網頁觸發按鈕執行 SP，SP 會執行 SSIS dtsx，如果在 SP 執行時將網頁關閉，SP 還會繼續執行嗎?"},{"categories":"Blogging","contents":"\r什麼是 View ?\rView 是 Select 完多個 Table 所組合而成的資料表，是一種 Virtual Structure，並且可以在資料表上進行 SELECT、INSERT、UPDATE、DELETE 的操作。\n優點\rSQL Server Database View 具有以下優點：\n提供了一個簡單的方式來查詢多個 Table View 可以簡化複雜的查詢，並且讓使用者只查看他們需要的資訊，而不用顧慮底層的資料表結構 View 可以提高資料安全性，因為可以限制使用者只能查詢特定欄位 缺點\rSQL Server Database View 也有一些缺點：\nView 的效能可能會比直接查詢 Table 差，因為需要額外的資源和時間來處理 View View 可能會讓資料庫設計更複雜，因為需要考慮許多 Table 之間的關係 View 可能會增加資料庫的存儲空間，因為 View 通常需要儲存 Table 的複本 為什麼要使用\r查詢多個 Table：如果需要查詢多個 Table 來取得所需資訊，使用 View 可以簡化這個過程，讓查詢更加簡單。 保持資料庫的一致性：透過 View，可以將 Table 的結構和應用程式分離，讓資料庫的設計更具有彈性，並且保持資料庫的一致性。 提高資料安全性：可以使用 View 來限制使用者只能查詢特定欄位，提高資料安全性。 常用的場景\r通常會用到 View 的地方都是 Data Access 的時候，需要 LEFT JOIN 或是 INNER JOIN View\n範例\r以下是一個簡單的範例，該 View 可以從兩個 Table（Customers 和 Orders）中 Select 出顧客的訂單資訊：\n1 2 3 4 5 6 CREATE VIEW CustomerOrders AS SELECT Customers.CustomerID, Customers.CustomerName, Orders.OrderID, Orders.OrderDate FROM Customers INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID 翻譯\rSSMS 翻譯叫做檢視\n","date":"Mar 27","permalink":"http://localhost:1313/post/2023-03-27-database-view-intro/","tags":"sql","title":"View 簡介"},{"categories":"Blogging","contents":"\rAutoMapper 是什麼\rAutoMapper 是一個在 .NET 平台上使用的工具，它可以幫助開發人員更快速、更方便地處理不同物件之間的 Mapping。\n什麼是物件之間的 Mapping，是指把一個物件的某些屬性自動地複製到另一個物件對應的屬性。\n這樣描述似乎有一點複雜，可以參考以下範例和步驟。\n使用步驟\r透過 Nuget 安裝 AutoMapper 套件。\n建立 DTO 和 Entity 類別，Click here\n建立 Profile 類別，設定 Attribute Mapping 的關係，Click here\nSetup AutoMapper，指定使用哪些 Profile 類別，Click here\n在需要使用 AutoMapper 的地方，透過 Dependency Injection 或手動建立 IMapper 物件，使用 Map 方法進行類型轉換，Click here\n範例\r第二步\r建立 DTO 和 Entity 類別，假設我們有一個 User class 和一個 UserInfo class，它們分別如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 public class User { public int Id { get; set; } public string Name { get; set; } public int Age { get; set; } } public class UserInfo { public int Id { get; set; } public string Name { get; set; } } 我們希望將 User 物件的值 mapping 到 UserInfo 物件上，只保留 Id 和 Name 屬性的值，這樣可以得到一個新的 UserInfo 物件。\n第三步\r建立 Profile 類別，設定 Attribute Mapping 的關係\n1 2 3 4 5 6 7 8 9 10 11 12 public class UserProfile : Profile { public UserProfile() { // dest =\u0026gt; dest.Name 為目標 class 的 attribute，在這邊指的是 UserInfo.Name // opt 是表示目標 class 的 attribute 的 mapping 的參數名稱 // src 則是表示來源 class 的 attribute。在這邊指的是 User.Name // opt.MapFrom(src =\u0026gt; src.Name) 的意思是，把 User.Name mapping 到 UserInfo.Name CreateMap\u0026lt;User, UserInfo\u0026gt;() .ForMember(dest =\u0026gt; dest.Name, opt =\u0026gt; opt.MapFrom(src =\u0026gt; src.Name)); } } 第四步\rSetup AutoMapper，指定使用哪些 Profile 類別\n1 2 3 4 5 6 7 8 9 // Startup.cs public void ConfigureServices(IServiceCollection services) { // 註冊 AutoMapper services.AddAutoMapper(typeof(Startup)); // 注冊其他服務 // ... } 第五步\r在需要使用 AutoMapper 的地方，透過 Dependency Injection 或手動建立 IMapper 物件，使用 Map 方法進行類型轉換\n1 2 3 4 5 6 7 8 9 public class ControllerBase { private readonly IMapper _mapper; public ControllerBase(IMapper mapper) { _mapper = mapper; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 [ApiController] [Route(\u0026#34;[controller]\u0026#34;)] public class UserController : ControllerBase { private readonly IUserService _userService; // base(mapper) 是在呼叫 base class ControllerBase 的 constructor 並傳入 mapper 參數， // 在 UserController 的實例化過程中，先初始化 base controller (ControllerBase) 的部分， // 確保base controller (ControllerBase)所需的資源、設定或狀態等已經被正確初始化。 // 因為 UserController 是繼承自 ControllerBase，而 ControllerBase 的建構子需要一個 IMapper 物件， // 所以在 UserController 的建構子中需要先呼叫基底類別的建構子， // 並傳入 IMapper 物件。使用 base(mapper) 的方式可以達到這個目的。 public UserController(IMapper mapper, IUserService userService) : base(mapper) { _userService = userService; } public IActionResult GetUser(int id) { var user = _userService.GetUser(id); var userDto = _mapper.Map\u0026lt;UserDto\u0026gt;(user); return Ok(userDto); } } 參考資料\rAutoMapper 官網\n","date":"Mar 25","permalink":"http://localhost:1313/post/2023-03-25-automapper-intro/","tags":".NET","title":"Automapper 簡介"},{"categories":"Blogging","contents":"\r定義\r代表 Function 的 pointer。當一個方法被 assign 給 delegate 時，就可以通過這個 delegate 來用 function。\n範例\r創建 delegate 1 delegate int Calculate(int x, int y); Assign delegate 1 Calculate calc = Add; 使用 delegate 1 int result = calc(5, 10); 為什麼不直接呼叫 function 而是使用 delegate 的方式?\r使用 delegate 可以幫助提高 code 的靈活性和 reusability。\n範例 - 使用 delegate\r當 User click 一個 button 時，會顯示 feedback message，這個範例就可以使用 delegate 完成。\n這裡使用了 EventHandler delegate，它是一個系統提供的 delegate，可以表示具有兩個參數的方法，第一個參數是從哪邊觸發，第二個參數是 EventArgs 類型的事件參數。\n然後，定義 OnClick function，它將在 User click button 被調用：\nEventHandler 定義\n1 public delegate void EventHandler(object sender, EventArgs e); 1 button1.Click += new EventHandler(OnClick); OnClick function 定義\n1 2 3 4 private void OnClick(object sender, EventArgs e) { Console.WriteLine(\u0026#34;Button clicked\u0026#34;); } 現在，如果需要更改按鈕 Click，只需要創建一個新的 function，並將它 assign 給 OnClick。這樣一來，不需要修改原有的代碼，就可以實現按鈕 Click 的不同 implementation。\n範例 - 不使用 delegate\r可以看到如果我想要修改 OnClick()，那麼 button1_Click() 和 OnClick() 都必須要修改，這樣就需要修改 2 個地方， 且如果想回到之前的版本，將會無法實現。\n1 2 3 4 private void button1_Click(object sender, EventArgs e) { OnClick(); } 1 2 3 4 public void OnClick() { Console.WriteLine(\u0026#34;Button clicked\u0026#34;); } ","date":"Mar 20","permalink":"http://localhost:1313/post/2023-03-20-c-sharp-delegate-intro/","tags":"c#","title":"C# Delegate 簡介"},{"categories":"Blogging","contents":"\rNVARCHAR(9)\r在 MSSQL 中， NVARCHAR(9) 的 9 代表的是在這一個 COLUMN 中，可以最多放 9 個字元，若未滿 9 個字元，則會補到 9 個字元，欄位長度是固定的。\n以英文和中文，可以是 abcdefghi，或是 aaaaccccd，一二三日禮拜拜日日\u0026hellip;等最多擺放 9 個字元。\n1 2 3 4 5 6 7 8 DROP TABLE IF EXISTS TEST CREATE TABLE TEST ( TEST1 NVARCHAR(9), TEST2 VARCHAR(9) ) INSERT INTO TEST VALUES(N\u0026#39;一二三日禮拜拜日日\u0026#39;, \u0026#39;\u0026#39;) INSERT INTO TEST VALUES(N\u0026#39;123456789\u0026#39;, \u0026#39;\u0026#39;) 如果輸入大於 9 個字元，會出現以下錯誤訊息\n儲存空間\rnvarchar(n)：(2 * n + 2) bytes\n不管是英文或中文，每一個字元都以 2 個 bytes 做計算，NVARCHAR(9) 表示儲存空間為 18 bytes + 2 byes，其中 2 bytes 為地址位置。\nVARCHAR(9)\r判斷規則\r判斷 Character set 是否可以存中文\n在 MSSQL 中，VARCHAR 是可以儲存中文的，只是 MSSQL 預設的 Character set 是 Latin1_General_CI_AS，是無法儲存中文的，\n須將 Character set 變成 Chinese_Taiwan_Stroke_CI_AS 或是其他可以相容中文的 Character set\n判斷編碼原則，計算最多可以放入幾個中文字\n以中文來說，需要先判斷中文的編碼原則，再去判斷長度，\n編碼原則常見的是 UTF-8 和 BIG5，\n以 UTF-8 來說，每一個中文字代表 3 個 bytes，\n但是 BIG5，每一個中文代表 2 bytes，\n不同的編碼，中文的長度會不同，\n在 UTF-8 編碼中，一二 需要 3+3 bytes = 6 bytes\n在 BIG5 編碼中，一二 需要 2+2 bytes = 4 bytes\n所以在 MSSQL 上設定 VARCHAR(9)，如果中文是以 UTF-8 方式放入 DB，可以最多放 9/3 = 3 個字\n如果中文是以 BIG5 方式放入 DB，可以最多放 9/2 = 4 個字\n1 2 3 4 5 6 7 8 DROP TABLE IF EXISTS TEST CREATE TABLE TEST ( TEST1 NVARCHAR(9), TEST2 VARCHAR(9) ) INSERT INTO TEST VALUES(N\u0026#39;一二三日禮拜拜日日\u0026#39;, \u0026#39;一二三日\u0026#39;) INSERT INTO TEST VALUES(N\u0026#39;123456789\u0026#39;, \u0026#39;123456789\u0026#39;) 儲存空間\r中文\r因為我在 varchar 放入中文，再加上中文一個字為 2 bytes，所以 varchar(9)的儲存空間為 2*9+2 = 20 bytes，其中 2 是用來記住地址\nvarchar(n)：(2 * n + 2) bytes\n英文\rvarchar(n)：(n + 2) bytes\n參考資料\r請問\u0026quot;李襎\u0026quot;這個字是算幾個 BYTE ??\n[MSSQL] 欄位開立(1) - nvarchar, varchar, nchar, char 的抉擇\n[iT 鐵人賽 Day6]SQL Server 資料型態 char varchar nchar nvarchar\n","date":"Feb 04","permalink":"http://localhost:1313/post/2023-02-04-nvarchar-9-what-does-it-mean/","tags":"SQL","title":"NVARCHAR(9) v.s. VARCHAR(9) IN MSSQL"},{"categories":"Snippets","contents":"\r錯誤訊息\r找不到路徑 \u0026lsquo;D:\\xxx\\bin\\roslyn\\csc.exe\u0026rsquo; 的一部分。\n解決方法\r找到 packages\\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.2.0.0\n進入 tools\n進入 Roslyn45\n貼到專案的 Bin folder，並重新命名為 roslyn\n再重啟專案，即可成功\n參考資料\r神祕的 ASP.NET bin\\roslyn 目錄\n[沒有蠢問題] 找不到路徑 bin\\roslyn\\csc.exe\n","date":"Feb 04","permalink":"http://localhost:1313/post/2023-02-04-can-not-find-roslyn-csc-exe-file/","tags":"ASP.NET","title":"找不到 bin\\roslyn\\csc.exe 檔案"},{"categories":"Snippets","contents":"\r錯誤訊息\r作業 \u0026lsquo;TEST.Subplan_1\u0026rsquo; 的 卸除 失敗。 (Microsoft.SqlServer.Smo) DELETE 陳述式與 REFERENCE 條件約束 \u0026ldquo;FK_subplan_job_id\u0026rdquo; 衝突。衝突發生在資料庫 \u0026ldquo;msdb\u0026rdquo;，資料表 \u0026ldquo;dbo.sysmaintplan_subplans\u0026rdquo;, column \u0026lsquo;job_id\u0026rsquo;。 陳述式已經結束。 (Microsoft SQL Server, 錯誤: 547)\n解決方法\r先找出要被刪除的 id 1 SELECT name, id FROM msdb.dbo.sysmaintplan_plans 再依序執行以下 SQL 1 2 3 DELETE FROM msdb.dbo.sysmaintplan_log WHERE plan_id = DELETE FROM msdb.dbo.sysmaintplan_subplans WHERE plan_id = DELETE FROM msdb.dbo.sysmaintplan_plans WHERE id = 再回到 SSMS 透過 UI 刪除該排程即可成功 參考資料\rSQL Server - cannot drop idle job\n","date":"Jan 16","permalink":"http://localhost:1313/post/2023-01-16-fail-to-delete-sql-server-agenet/","tags":"SSMS","title":"在SSMS上刪除SQL Server Agent 失敗"},{"categories":"templates","contents":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 from selenium import webdriver from selenium.webdriver.chrome.options import Options import time chrome_options = Options() chrome_options.add_experimental_option(\u0026#34;detach\u0026#34;, True) driver = webdriver.Chrome(options=chrome_options) # 開啟登入網頁 driver.get(\u0026#39;login page url\u0026#39;) # Account input_acct_box = driver.find_element(\u0026#39;xpath\u0026#39;, \u0026#39;//*[@id=\u0026#34;Acct\u0026#34;]\u0026#39;) input_acct_box.send_keys(\u0026#39;\u0026#39;) # password input_pwd_box = driver.find_element(\u0026#39;xpath\u0026#39;, \u0026#39;//*[@id=\u0026#34;Pwd\u0026#34;]\u0026#39;) input_pwd_box.send_keys(\u0026#39;\u0026#39;) # 在 termianl 上面輸入 input captcha = input(\u0026#39;Please enter the CAPTCHA: \u0026#39;) captcha_input = driver.find_element(\u0026#39;xpath\u0026#39;, \u0026#39;//*[@id=\u0026#34;Captcha\u0026#34;]\u0026#39;) captcha_input.send_keys(captcha) print(\u0026#39;驗證碼已完成\u0026#39;) # 停2s time.sleep(2) # Find the submit button and click it submit_button = driver.find_element(\u0026#39;xpath\u0026#39;, \u0026#39;//*[@id=\u0026#34;Login_box\u0026#34;]/form/div/div/div/div[3]/input\u0026#39;) submit_button.click() print(\u0026#39;登入已完成\u0026#39;) #如果需要執行完自動關閉，就要加上下面這一行 #browser.close() ","date":"Jan 03","permalink":"http://localhost:1313/post/2023-01-03-auto-login-using-selenium/","tags":"python","title":"使用 Selenium 和手打驗證碼登入網頁"},{"categories":"Debugging","contents":"\r錯誤訊息\rOSError: [WinError 216] 此版本的 %1 與您執行的 Windows 版本不相容。請檢查電腦的系統資訊，然後連絡軟體發行者。 The version of %1 is not compatible with the version of Windows you\u0026rsquo;re running.\n解決方法\r通常是 x86 和 x64 位元的衝突，不過這邊指的是 Driver 和電腦的安裝版版本不一致，需下載一樣的版本。\n以 Google Chrome 為例：\n可以看到我的 Chrome 是安裝 108.0.5359.125\nDriver 也需要下載相同的版本\n將下載好的 Driver 放在跟 python.exe 同一個資料夾\n可以執行 Sample Code 看能不能成功\n1 2 3 4 5 6 7 8 9 10 11 12 13 from selenium import webdriver from selenium.webdriver.chrome.options import Options #使用chrome的webdriver chrome_options = Options() chrome_options.add_experimental_option(\u0026#34;detach\u0026#34;, True) driver = webdriver.Chrome(options=chrome_options) #開啟google首頁 driver.get(\u0026#39;https://www.google.com/\u0026#39;) #如果需要執行完自動關閉，就要加上下面這一行 #browser.close() 成功的畫面\n","date":"Dec 15","permalink":"http://localhost:1313/post/2022-12-15-windows-not-compatible/","tags":"selenium","title":"執行 selenium 出包，此版本的 %1 與您執行的 Windows 版本不相容"},{"categories":"Debugging","contents":"\r錯誤訊息\rNo valid Oracle clients found. You need at least one 64-bit client properly configured.\n錯誤原因\r因為我安裝的 Toad 為 64 bit，但是 Oracle Instant Client 為 32 bit，所以需要另外再下載 64 bit 的 Oracle Instant Client。\n可以從 Help \u0026gt; About 查看 Toad 目前使用 x86 還是 x64\n如果之前有安裝過 sqlplus，可以執行 sqlplus.exe 並打開工作管理員之後查看 Oracle Instant Client 的版本\n解決步驟\r到 Oracle 官網下載 Oracle Instant Client Downloads，需要注意位元，如果 Toad 安裝 32 bit的版本 ，Oracle Instant Client 也需要安裝 32 bit，如果 Toad 安裝 64 bit的版本 ，Oracle Instant Client 也需要安裝 64 bit。 這一步很重要，因為容易踩雷!!\n因為我的電腦是 Windows 10，再加上我要安裝的 Toad 是64bit 的版本，所以下載 Oracle Instant Client 64 bit的版本。 解壓縮之後長的是這樣 搜尋控制台 搜尋環境 \u0026gt; 點擊編輯系統環境變數 點「環境變數」 點擊 Path \u0026gt; 點擊編輯 點擊新增 \u0026gt; 將剛剛解壓縮的資料夾的檔案路徑貼上\u0026gt; 上移移到第一個 \u0026gt; 按下確定 在 Toad 上就可以看到 Connect Using 已經指向我們剛剛安裝的 Oracle Instant Client，這時候在打上伺服器 IP 即可連線成功。 參考資料\rHow to install an Oracle Instant Client for Toad® for Oracle\n","date":"Nov 22","permalink":"http://localhost:1313/post/2022-11-22-no-valid-oracle-clients-found-toad-for-oracle/","tags":"toad","title":"No valid Oracle clients found. You need at least one 64-bit client properly configured. | Toad for Oracle"},{"categories":"Blogging","contents":"\r前情提要\r本篇使用 AdventureWorks2016 資料庫，將每一個產品的利用 FOR XML PATH 將評論人顯示多筆資料。\n步驟\r先找出要使用合併的資料 (通常在 detail page)，先鎖定 ProductID = 937，較容易寫出完整 query 1 2 3 4 SELECT \u0026#39;,\u0026#39; + [Production].[ProductReview].ReviewerName FROM [Production].[ProductReview] WHERE ProductID = 937 FOR XML PATH(\u0026#39;\u0026#39;) 可以看到評論 ProductId = 937 的人有 David 和 Jill\n在每一個產品中，顯示各個產品的評論的人並使用 FOR XML PATH 顯示 將 WHERE ProductID = 937 拿掉 加入 [Production].[ProductReview].ProductID = [Product].ProductID 和 FROM [Production].[Product] 1 2 3 4 5 6 7 8 SELECT ProductID, ( SELECT \u0026#39;,\u0026#39; + [Production].[ProductReview].ReviewerName FROM [Production].[ProductReview] WHERE [Production].[ProductReview].ProductID = [Product].ProductID FOR XML PATH(\u0026#39;\u0026#39;) ) AS Reviewer FROM [Production].[Product] 因為這一個例子的評論人並不多，所以先拿掉沒有評論的產品\n1 2 3 4 5 6 7 8 9 10 11 12 SELECT * FROM ( SELECT ProductID, ( SELECT \u0026#39;,\u0026#39; + [Production].[ProductReview].ReviewerName FROM [Production].[ProductReview] WHERE [Production].[ProductReview].ProductID = [Product].ProductID FOR XML PATH(\u0026#39;\u0026#39;) ) AS Reviewer FROM [Production].[Product] )A WHERE Reviewer IS NOT NULL 這樣就很清楚的看到哪一個產品有被誰寫評價\n使用 STUFF()，拿掉最左邊的逗號 STUFF(原字串, 起始位置, 移除長度, 替換字串) 1 2 3 4 5 6 7 8 9 10 11 12 SELECT * FROM ( SELECT ProductID, STUFF(( SELECT \u0026#39;,\u0026#39; + [Production].[ProductReview].ReviewerName FROM [Production].[ProductReview] WHERE [Production].[ProductReview].ProductID = [Product].ProductID FOR XML PATH(\u0026#39;\u0026#39;) ), 1, 1, \u0026#39;\u0026#39;) AS Reviewer FROM [Production].[Product] )A WHERE Reviewer IS NOT NULL 參考資料\r[SQL]將多筆資料合併為一筆顯示(FOR XML PATH)\n[食譜好菜] SQL Server 使用「FOR XML」語法做欄位合併\n","date":"Nov 21","permalink":"http://localhost:1313/post/2022-11-21-merge-column-data-to-a-cell/","tags":"sql","title":"將多筆資料合併為一筆顯示 - FOR XML PATH | SQL"},{"categories":"Snippets","contents":"\r方法\r有 2 種方法\n使用 SSMS 使用 TSQL TSQL\r在資料庫按右鍵 \u0026gt; 屬性 \u0026gt; 復原模式\n如果 DB 的復原模式使用「簡單」，直接使用 DBCC SHRINK 指令即可。\n1 2 3 4 5 -- 找出 log 檔案名稱 SELECT name FROM sys.master_files WHERE type_desc = \u0026#39;LOG\u0026#39; -- AdventureWorks2012_log為壓縮的檔名 -- 1 為 AdventureWorks2012_log 壓縮到剩 1 MB DBCC SHRINKFILE (AdventureWorks2012_log, 1) 如果 DB 的復原模式使用「完整」，可以將復原模式從完整變成「簡單」後再壓縮檔案，壓縮檔案結束後再將復原模式調回完整。\n1 2 3 4 5 6 7 8 9 10 -- 將復原模式變成「簡單」 ALTER DATABASE AdventureWorks2012 SET RECOVERY SIMPLE GO -- 壓縮檔案 DBCC SHRINKFILE (AdventureWorks2012_log, 1) GO -- 將復原模式變成「完整」 ALTER DATABASE AdventureWorks2012 SET RECOVERY FULL SSMS\r資料庫按右鍵 \u0026gt; 工作(Tasks) \u0026gt; 壓縮(Shrink) \u0026gt; 檔案(Files) 檔案類型選擇紀錄檔 (log)，並選擇要壓縮的 log 檔的位置，壓縮動作可以自行選擇。 按下確定即可壓縮 log 檔 TSQL\r1 2 3 4 5 6 7 8 USE [master]; GO -- 要備份的資料庫名稱 BACKUP DATABASE [SQLTestDB] TO DISK = N\u0026#39;Z:\\SQLServerBackups\\AdvWorksData.bak\u0026#39; WITH NOFORMAT, NOINIT, NAME = N\u0026#39;SQLTestDB-Full Database Backup\u0026#39;, SKIP, NOREWIND, NOUNLOAD, STATS = 10; GO 參考資料\rHow to shrink the transaction log\n阿湯哥@IT三兩事\n","date":"Nov 11","permalink":"http://localhost:1313/post/2022-11-11-how-to-compress-transaction-logs/","tags":"sql","title":"如何壓縮 Transaction Log 檔案 | SQL"},{"categories":"Snippets","contents":"\r錯誤訊息\r\u0026ldquo;子計劃 缷除失敗\u0026rdquo;\ndelete 陳述式與reference 條件的約束\u0026rsquo;FK_subplan_job_id\u0026rsquo;衝突。衝突發生在資料庫\n\u0026ldquo;msdb\u0026rdquo;,資料表 \u0026ldquo;dbo.sysmaintplan_subplans\u0026rdquo;,colum \u0026ldquo;job_id\u0026rdquo;。\n英文版：\nTITLE: Microsoft SQL Server Management Studio \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; Drop failed for Job \u0026lsquo;manual_db_backups.Subplan_1\u0026rsquo;. (Microsoft.SqlServer.Smo) For help, click: http://go.microsoft.com/fwlink?ProdName=Microsoft+SQL+Server\u0026amp;ProdVer=9.00.3042.00\u0026amp;EvtSrc=Microsoft.SqlServer.Management.Smo.ExceptionTemplates.FailedOperationExceptionText\u0026amp;EvtID=Drop+Job\u0026amp;LinkId=20476 \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; ADDITIONAL INFORMATION: An exception occurred while executing a Transact-SQL statement or batch. (Microsoft.SqlServer.ConnectionInfo) \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; The DELETE statement conflicted with the REFERENCE constraint \u0026ldquo;FK_subplan_job_id\u0026rdquo;. The conflict occurred in database \u0026ldquo;msdb\u0026rdquo;, table \u0026ldquo;dbo.sysmaintplan_subplans\u0026rdquo;, column \u0026lsquo;job_id\u0026rsquo;. The statement has been terminated. (Microsoft SQL Server, Error: 547) For help, click: http://go.microsoft.com/fwlink?ProdName=Microsoft+SQL+Server\u0026amp;ProdVer=09.00.3042\u0026amp;EvtSrc=MSSQLServer\u0026amp;EvtID=547\u0026amp;LinkId=20476\n發生原因\r因為先刪除主計畫之後，再刪除子計畫時，就會找不到主計畫在哪裡，因此無法刪除。\n解決步驟\rStep 1：先查詢子計畫和子計畫的 log\n1 2 3 4 5 6 7 8 9 USE [MSDB] GO -- 查詢子計畫 select * from sysmaintplan_subplans -- 查詢子計畫log select * from sysmaintplan_log Step 2：刪除子計畫和子計畫的 log\n1 2 3 4 5 6 7 8 9 10 11 12 13 USE [MSDB] go -- 刪除維護計畫子計畫的 log DELETE FROM sysmaintplan_log WHERE subplan_id in ( SELECT Subplan_ID from sysmaintplan_subplans -- change Subplan name where neccessary WHERE subplan_name = \u0026#39;sub plan name\u0026#39; ) -- 刪除維護計畫子計畫 DELETE FROM sysmaintplan_subplans WHERE subplan_name = \u0026#39;sub plan name\u0026#39; Step 3：到 SQL Agent Server 刪除該計畫即可\n參考資料\rThe DELETE statement conflicted with the REFERENCE constraint \u0026ldquo;FK_subplan_job_id\u0026rdquo;\nMS SQL SERVER 刪除 工作排程(JOBS)時出現錯誤\n","date":"Nov 10","permalink":"http://localhost:1313/post/2022-11-10-the-delete-statemet-conflicted/","tags":"sql","title":"The DELETE statement conflicted with the REFERENCE constraint \"FK_subplan_job_id\" | SQL"},{"categories":"Blogging","contents":" 將週期天數從預設的 365 天改到 30 天或其他更小的數字。 將 delete_batch_size 設定為 1000，預設為 10。\n1 Alter procedure SSISDB.[internal].[cleanup_server_retention_window] SET @delete_batch_size = 1000 把以下 4 張 Table 做 Page 壓縮 1 2 3 4 5 6 7 8 USE [SSISDB] ALTER TABLE [internal].[event_messages] REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = PAGE) ALTER TABLE [internal].[operation_messages] REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = PAGE) ALTER TABLE [internal].[execution_component_phases] REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = PAGE) ALTER TABLE [internal].[execution_data_statistics] REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = PAGE) Shrink the db 1 2 3 4 5 USE [SSISDB] GO DBCC SHRINKDATABASE(N\u0026#39;SSISDB\u0026#39;) GO 參考資料\rHow to Reduce SSISDB Size\n","date":"Nov 07","permalink":"http://localhost:1313/post/2022-11-07-shrink-ssis-db-files/","tags":"ssis","title":"縮小 SSIS DB 檔案大小 | SSIS"},{"categories":"Snippets","contents":"\r前情提要\r在 C# 4.0，有一個新的 Type 叫做 Dynamic Type。\nDynamic Type 不會在 compile time 做 checking，而是在 runtime 的時候編譯器才會知道該變數的 type ，並在 runtime 做 checking。\n須注意事項\r在大多數的時候，可以把 dynamic type 視為 object。 如果想要知道該變數在 runtime 的 type，可以使用 GetType()。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 using System; public class Program { public static void Main() { dynamic a = \u0026#34;this is a string\u0026#34;; dynamic b = 123234; Console.WriteLine(\u0026#34;Get the actual type of value1: {0}\u0026#34;, a.GetType().ToString()); Console.WriteLine(\u0026#34;Get the actual type of value2: {0}\u0026#34;, b.GetType().ToString()); } } 結果：\nGet the actual type of value1: System.String\rGet the actual type of value2: System.Int32 當 assign 一個 class object 的 type 使用 dynamic 的時候，compiler 並不會偵測這一個 dynamic object 有沒有正確的使用 method 或是 property。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 using System; public class Program { public static void Main() { dynamic s1 = new Student(); // runtime error Console.WriteLine(s1.DisplayStudentInfo()); } } public class Student { public void DisplayStudentInfo(int id) { } } Run-time exception (line 10): No overload for method \u0026#39;DisplayStudentInfo\u0026#39; takes \u0026#39;0\u0026#39; arguments\rStack Trace:\r[Microsoft.CSharp.RuntimeBinder.RuntimeBinderException: No overload for method \u0026#39;DisplayStudentInfo\u0026#39; takes \u0026#39;0\u0026#39; arguments]\rat CallSite.Target(Closure , CallSite , Object )\rat System.Dynamic.UpdateDelegates.UpdateAndExecute1[T0,TRet](CallSite site, T0 arg0)\rat Program.Main() :line 10 可以將 dynamic object 當成參數傳入 method。 1 2 3 4 5 // 2數相加 public static void Add(dynamic s1, dynamic s2) { Console.WriteLine(s1 + s2); } 如果 method 或是 property 不相容，compiler 會在 runtime 有錯誤訊息。 在 Visual Studio 中不支持 Intellisense。 如果沒有額外做 dynamic type 的 checking，compiler 就不會丟錯誤。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 using System; public class Program { public static void Main() { // compiler 不會有錯誤 Add(false, true); } // 2數相加 public static void Add(dynamic s1, dynamic s2) { Console.WriteLine(s1 + s2); } } 但在執行的時候會有錯誤。\nRun-time exception (line 14): Operator \u0026#39;+\u0026#39; cannot be applied to operands of type \u0026#39;bool\u0026#39; and \u0026#39;bool\u0026#39;\rStack Trace:\r[Microsoft.CSharp.RuntimeBinder.RuntimeBinderException: Operator \u0026#39;+\u0026#39; cannot be applied to operands of type \u0026#39;bool\u0026#39; and \u0026#39;bool\u0026#39;]\rat CallSite.Target(Closure , CallSite , Object , Object )\rat System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)\rat Program.addstr(Object s1, Object s2) :line 14\rat Program.Main() :line 8 參考資料\rDynamic Type in C#\nC# - Dynamic Types\n","date":"Oct 24","permalink":"http://localhost:1313/post/2022-10-24-dynamic-type-in-c-sharp/","tags":"c#","title":"Dynamic Type 介紹  | c#"},{"categories":"Snippets","contents":"\rSnippet\r1 2 3 4 if (!datetime.HasValue) { //unassigned } 參考資料\r[Checking to see if a DateTime variable has had a value assigned\n","date":"Oct 24","permalink":"http://localhost:1313/post/2022-10-24-check-date-is-null-date/","tags":"c#","title":"檢查 date 是否為 null  | c#"},{"categories":"Snippets","contents":"\r錯誤訊息\rThe contextual keyword \u0026lsquo;var\u0026rsquo; may only appear within a local variable declaration.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 using System; using System.Collections.Generic; using System.Web; using System.Text; using WebMatrix.Data; /// \u0026lt;summary\u0026gt; /// Summary description for ClassName /// \u0026lt;/summary\u0026gt; public class Base { public void CalculateTotalPriceInCart(var PartNumber, var Description, var OrderId, bool IsBoxed) { var database = Database.Open(\u0026#34;OSF\u0026#34;); var query = \u0026#34;\u0026#34;; var result = \u0026#34;\u0026#34;; decimal price = 0.00M; if(IsBoxed) { // Select item. query = \u0026#34;SELECT Boxes, BoxPrice FROM Cart WHERE OrderId = \u0026#39;\u0026#34; + OrderId + \u0026#34;\u0026#39; AND PartNumber = \u0026#39;\u0026#34; + PartNumber + \u0026#34;\u0026#39; AND Description = \u0026#39;\u0026#34; + Description + \u0026#34;\u0026#39; AND IsBoxed = 1\u0026#34;; result = database.Query(query); // Recalculate Price. foreach(var item in result) { price = result.Boxes * result.BoxPrice; } // Update item. query = \u0026#34;UPDATE Cart SET BoxPrice = \u0026#39;\u0026#34; + price + \u0026#34;\u0026#39; WHERE OrderId = \u0026#39;\u0026#34; + OrderId + \u0026#34;\u0026#39; AND PartNumber = \u0026#39;\u0026#34; + PartNumber + \u0026#34;\u0026#39; AND Description = \u0026#39;\u0026#34; + Description + \u0026#34;\u0026#39; AND IsBoxed = 1\u0026#34;; database.Execute(query); } } } 為什麼\rvar 只能在宣告並初始化後才可以在 method 的 scope 使用，不能在 global scope 使用和當作參數使用。\n因為編譯器無法知道 CalculateTotalPriceInCart 必須要接到的參數的 data type 是什麼。\n解決方法\r將 CalculateTotalPriceInCart 所接收到的參數的資料型態變成 strongly data type。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 using System; using System.Collections.Generic; using System.Web; using System.Text; using WebMatrix.Data; /// \u0026lt;summary\u0026gt; /// Summary description for ClassName /// \u0026lt;/summary\u0026gt; public class Base { // var 不能當作參數的型態傳入，參數的資料型態必須是強型別的資料型態。 public void CalculateTotalPriceInCart(IEnumerable\u0026lt;dynamic\u0026gt; Description, string PartNumber, string OrderId,bool IsBoxed) { var database = Database.Open(\u0026#34;OSF\u0026#34;); var query = \u0026#34;\u0026#34;; var result = \u0026#34;\u0026#34;; decimal price = 0.00M; if(IsBoxed) { // Select item. query = \u0026#34;SELECT Boxes, BoxPrice FROM Cart WHERE OrderId = \u0026#39;\u0026#34; + OrderId + \u0026#34;\u0026#39; AND PartNumber = \u0026#39;\u0026#34; + PartNumber + \u0026#34;\u0026#39; AND Description = \u0026#39;\u0026#34; + Description + \u0026#34;\u0026#39; AND IsBoxed = 1\u0026#34;; result = database.Query(query); // Recalculate Price. foreach(var item in result) { price = result.Boxes * result.BoxPrice; } // Update item. query = \u0026#34;UPDATE Cart SET BoxPrice = \u0026#39;\u0026#34; + price + \u0026#34;\u0026#39; WHERE OrderId = \u0026#39;\u0026#34; + OrderId + \u0026#34;\u0026#39; AND PartNumber = \u0026#39;\u0026#34; + PartNumber + \u0026#34;\u0026#39; AND Description = \u0026#39;\u0026#34; + Description + \u0026#34;\u0026#39; AND IsBoxed = 1\u0026#34;; database.Execute(query); } } } 參考資料\rThe contextual keyword \u0026lsquo;var\u0026rsquo; may only appear within a local variable declaration issues\n","date":"Oct 19","permalink":"http://localhost:1313/post/2022-10-21-the-contextual-keyword-var-may-only-appear-within-a-local-variable-declaration/","tags":"c#","title":"The contextual keyword 'var' may only appear within a local variable declaration.  | c#"},{"categories":"Snippets","contents":"假設現在程式拋出了一個 Exception，那麼我們看到的訊息應該會是 C# 預設寫好的錯誤訊息，但同時我們希望使用者需要知道這一個錯誤訊息，開發者應該可以將預設寫好的錯誤訊息變成使用者看得懂的東西。此時可以使用 Exception 的 Data 屬性。\nData 屬於 key/value pair，可以傳入自己想要的 key 和 value，可以使用以下 Exception.Data[key] 取到 Value。\n範例\r1 2 3 4 5 catch (Exception ex) { ex.Data.Add(\u0026#34;UserMessage\u0026#34;, \u0026#34;An error occurred while trying to load the XSLT file.\u0026#34;); throw; } 1 2 3 4 5 6 7 8 9 10 11 catch (Exception ex) { if (ex.Data.Contains(\u0026#34;UserMessage\u0026#34;)) { MessageBox.Show(ex.Data[\u0026#34;UserMessage\u0026#34;].ToString()); } else { MessageBox.Show(ex.Message); } } 參考資料\rHow can I add a message to an exception without losing any information in C#?\n","date":"Oct 19","permalink":"http://localhost:1313/post/2022-10-19-add-a-message-to-an-exception-without-losing-any-information-in-c-sharp/","tags":"c#","title":"保留原本 C# 的 Exception message，並加上客製化 Exception Message  | c#"},{"categories":"Blogging","contents":"\r介紹\rposition 屬性用於 HTML 元素的定位方法，再搭配使用 top、bottom、left 和 right 屬性定位。\n但是，除非首先設置了 position 屬性，否則 top、bottom、left 和 right 屬性將不起作用。\n以下為 position 屬性值：\nposition: static position: relative position: fixed position: absolute position: sticky Static Positioning\rposition: static 是 HTML 元素的預設值。\n任何套用 position: static; 的元素「不會被特別定位」在頁面上特定位置，而是照著瀏覽器預設的設定自動排版在頁面上。\nposition: static; 的元素不受 top 、 right 、 bottom 和 left 屬性影響。\n範例\rCodePen\n可以看到加上了 position: static;之後，元素依然在相同的位置。\nRelative Positioning\rposition: relative; 的元素和 position: static的元素 十分類似，position: relative;的元素可以讓開發者修改元素的最終位置。\nposition: relative; 的元素必須加上top 、 right 、 bottom 和 left 屬性，才能修改元素的最終位置，使元素相對於原本元素該出現的位置進行定位。\n而不管這些「相對定位」過的元素如何在頁面上移動位置或增加了多少空間，都不會影響到原本其他元素所在的位置。\n範例\rCodePen\n1 2 3 4 5 .relative { position: relative; top: 20px; left: 10px; } 可以看到加了 .relative 的 .box2，.box2 會相對於原本的位置向下移動 20px，向右移動 10px，表示離上方 20px，左邊 10px。\n也可以看到 .box2 已經疊在 .box3 上方，表示 .box3 並沒有因為 .box2有移動跟著移動。\n如果把 .relative 拿掉，表示沒有特別定位，.box2元素就會回到原本的位置。\nFixed Positioning\r設定為 position: fixed 的元素是相對於視窗進行定位，即使往下 scroll 或是往上 scroll，元素都同一位置，不會隨著滾動而有所改變。\n可以搭配 top 、 right 、 bottom 和 left 屬性將此元素定位在瀏覽器的某一個地方。\n範例\rCodePen\n可以看到範例，即便我是把要固定的元素放在文字裡面，我還是會相對於瀏覽器視窗做定位。\nAbsolute Positioning\r需要注意以下 3 件事情：\n剩下的元素向上移動 寬度變化 相對於哪一個元素定位 注意事項\r剩下的元素向上移動\r設定為 position: absolute; 的元素，會完全跳脫該頁面，會感覺像浮在頁面之上。\n所以，設定為 position: absolute; 的元素原本所占用的空間將會消失，在 position: absolute; 以後的元素將會往上移動。\n寬度變化\r我們一開始沒有設元素的寬度，所以寬度會完全撐開至父元素的邊界，這是 block 元素的特性。\n當設定為 position: absolute; 的元素跳脫該頁面後，也意味著，它脫離了父元素的範圍，寬度就以內容為基準。\n相對於哪一個元素定位\r當元素的 position 設定 position: absolute 後， 該元素就會往外層的元素找是否有 position:relative、position: absolute 、position: fixed 和 position: inherit (若繼承的是前面 3 個之一)的元素，若是都沒有，就會以該網頁頁面(\u0026lt;body\u0026gt;)的左上角為定位點。\n若沒有設定任何 top 、 right 、 bottom 和 left 屬性，設定為 position: absolute; 的元素的位置將遵照原本的位置(position: static)，但依舊會跳脫原本頁面。\n範例\rCodePen\n原圖\r下圖為原本元素的定位。\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;div class=\u0026#34;wrapper \u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box1 \u0026#34;\u0026gt; box 1 Lorem ipsum dolor sit amet consectetur adipisicing elit. Vero totam eaque mollitia explicabo cum aut sint ut nam enim deserunt! \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box2\u0026#34;\u0026gt;box 2 Lorem ipsum dolor sit amet\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box3\u0026#34;\u0026gt; box 3 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus, quis. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Cum voluptates veniam fuga, cupiditate ipsam laboriosam! \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 .wrapper { border: 5px solid #046865; height: 200px; } .box1 { background-color: #e53d00; } .box2 { background-color: #ffe900; } .box3 { background-color: #21a0a0; } 範例 1 - 在 box 2 加上 position: absolute;\r1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;div class=\u0026#34;wrapper \u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box1 \u0026#34;\u0026gt; box 1 Lorem ipsum dolor sit amet consectetur adipisicing elit. Vero totam eaque mollitia explicabo cum aut sint ut nam enim deserunt! \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box2 absolute\u0026#34;\u0026gt;box 2 Lorem ipsum dolor sit amet\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box3\u0026#34;\u0026gt; box 3 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus, quis. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Cum voluptates veniam fuga, cupiditate ipsam laboriosam! \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 .wrapper { border: 5px solid #046865; height: 200px; } .box1 { background-color: #e53d00; } .box2 { background-color: #ffe900; position: absolute; } .box3 { background-color: #21a0a0; } 可以看到 .box2 加上了 position: absolute 之後，後面的 .box3 會跑上來，因為 .box2 已經有自己獨立的一層。\n寬度的部分也因為 .box2 沒有設定絕對寬度，再加上脫離父元素(.wrapper)，所以.box2寬度等於該內容寬度。\n範例 2 - 在 box 2 加上 position: absolute; 再加上 top: 0\r如果在 .absolute 上面加上 top: 0，可以看到因為父元素 .wrapper 的 position: static，所以 .box2 並不會相對於.wrapper 的位置進行定位，反而是相對定位於左上角的 \u0026lt;html\u0026gt;。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 .wrapper { border: 5px solid #046865; height: 200px; } .box1 { background-color: #e53d00; } .box2 { background-color: #ffe900; position: absolute; top: 0; } .box3 { background-color: #21a0a0; } 範例 3 - 在 box 2 加上 position: absolute; 再加上 top: 0，在父元素.wrapper 加上 position: relative\r如果在 .wrapper 上面加上 position: relative;，可以看到 .box2 會相對於.wrapper 的位置進行定位。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 .wrapper { border: 5px solid #046865; height: 200px; position: relative; } .box1 { background-color: #e53d00; } .box2 { background-color: #ffe900; position: absolute; top: 0; } .box3 { background-color: #21a0a0; } Sticky Positioning\rposition: sticky;是一個比較新的屬性，如果要支援舊瀏覽器或是 IE，需要使用別的方法。詳細瀏覽器支援可以參考 Can I Use\u0026hellip;。\n使用 position: sticky; 的元素會根據使用者的 scroll bar 位置進行定位。\nposition: sticky; 的元素有點像是 position: relative 和 position: fixed 之間做切換。 在預設時有 position: relative，但 scroll 到某一位置時，該元素會變成 position: fixed，一直固定在瀏覽器的某一個位置。\n範例\rCodePen\n可以看到一開始時，紅色底色的 div 被定位在某一個位置，但是當我 scroll 到某一個地方的時候，紅色底色的 div 就好像使用了position: fixed，將 div 一直定位在上方。\n參考資料\rCSS 布局 - position 属性\n學習 CSS 版面配置\nCSS 定位詳解\nCSS relative? absolute? 傻傻分不清楚\n","date":"Oct 17","permalink":"http://localhost:1313/post/2022-10-17-intro-to-css-positioning/","tags":"css","title":"CSS positioning 介紹 | css"},{"categories":"Blogging","contents":"\r預設結果\r此為我們要做的結果圖。\nbackground-position\rbackground-position 用來設定背景圖片位置，如果只指定 x 軸位置，y 軸位置必定為 center。\n1 background-position: x軸位置 y軸位置; 1 2 3 4 5 6 /* 靠左靠下對齊 */ background-position:left bottom;　/* 離左邊 30px，離上方 60px 的位置 */ background-position:30px 60px;　/* 離左邊 10%，離上方 50% 的位置 */ background-position:10% 50%;　CodePen 範例\rCodePen\n1 2 3 4 5 6 \u0026lt;div class=\u0026#34;wrapper\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;frame\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;frame\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;frame\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;frame\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 .wrapper { /* 使用 flex 讓 flex item 呈現由左到右的排列 */ display: flex; /* 增加一點空間在 flex item 的周圍 */ justify-content: space-around; } .frame { /* 將每一個 div 寬度設定為 100px */ width: 100px; /* 將每一個 div 高度設定為 150px */ height: 150px; /* 設定背景圖片 */ background-image: url(\u0026#34;https://picsum.photos/200/150\u0026#34;); /* 將背景圖片位置置中 */ background-position: center; /* 設定邊框顏色及寬度 */ border: 1px solid #ecf1f4; /* 設定邊框的圓角 */ border-radius: 24px; /* 在:hover時增加動畫效果 */ transition: 0.5s; } .frame:hover { /* 在:hover時寬度變成 200px */ width: 200px; } 參考資料\rhow to zoom a div with :hover but not the image inside\n","date":"Oct 17","permalink":"http://localhost:1313/post/2022-10-18-zoom-a-div-with-hover/","tags":"css","title":"Hover div 的時候放大圖片 | css"},{"categories":"Blogging","contents":"\r介紹\rflex-shrink 只適用於 flex item 上。\n當使用 flex-shrink 時，如果 flex container 的長寬太小，設定 flex shrink 可以允許 flex item 縮小。 當 flex container 的寬度小於其中所有 flex item 的相加起來的寬度時，flex item 就會縮小。\nflex-shrink 的屬性值為數字。數字越大，flex item 會縮小得越多。\n例如有一個 flex item 的 flex-shrink: 1，而另一個 flex item 的 flex-shrnk: 3，則 flex-shrink: 3的 flex item 將縮小原本自己寬度四分之三， flex-shrink: 1 的 flex item 將縮小原本自己寬度四分之三。\nflex-shrink 定義空間不夠時各個元素如何收縮。flex-shrink: 1 為預設值。\n範例\rCodePen\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 html { box-sizing: border-box; } .flex-container { width: 1000px; height: 500px; display: flex; background-color: violet; } .flex-container \u0026gt; div { padding: 20px; background-color: aqua; margin: 10px; width: 200px; height: 30px; flex-shrink: 1; } 可以看到每一個 flex item 的 width = width: 200px + padding: 20px x 2 (左右 2 邊) + margin: 10px x 2 = 260px。\n5 個 flex item 表示總共的 width 為 260px x 5 = 1300px\n但是 flex container 的 width 也才 1000px，多出來 1300px - 1000px = 300px，這時候我們想要讓 flex item 依照我們想要的比例縮小時該怎麼做?\n具體的計算方式為： 每個元素收縮的權重為 flex item 的 flex-shrink 乘上自己的寬度。\n打到這邊我自己也看好久，看範例會比較容易理解。\n以這一個範例，總權重(每一個 flex item 的寬度乘上 flex shrink 的值)為 1 x 260 + 2 x 260 + 1 x 260 + 1 x 260 + 1 x 260 = 1560\n我們剛剛有算出了已經超過 300px，那這 300px 將由 5 個 flex item 依比例分攤，現在看到 css code，第 2 個 flex item 的 flex-shrink: 2。\n第一個 flex item 計算方式： 300(總共超過多少) x 1 (第一個 flex item 的 flex-shrink，因為無設定，所以為預設值 1) x 260 (第一個 flex item 的 width) / 1560(總權重) = -50px\n原本 260px - 50px = 210px = 第一個 flex item shrink 完的總寬度。 可以對照以下的圖片，第一個 flex item shrink 完的 width 是 210px。\n那我們來計算第 2 個 flex item 真實的 width 為多少。\n第 2 個 flex item 計算方式： 300(總共超過多少) x 2(第 2 個 flex item 的 flex-shrink: 2) x 260 (第 2 個 flex item 的 width) / 1560 (總權重) = -100px\n原本 260px - 100px = 160px = 第 2 個 flex item shrink 完的總寬度。 可以對照以下的圖片，第 2 個 flex item shrink 完的 width 為 160px。\n那麼 flex item 3 ~ flex item 5 都和 flex item 1 的計算方式一樣，這裡就不多贅述。\n","date":"Oct 16","permalink":"http://localhost:1313/post/2022-10-16-intro-to-flex-shrink/","tags":"css flexbox","title":"flex-shrink 屬性介紹 | css"},{"categories":"Blogging","contents":"ORACLE 官方文件\nPO_HEADERS_ALL\r說明\r採購訂單單頭 ，記錄向哪個供應商買東西。\n主要資料\rColumns 中文 AGENT_ID 採購員 SEGMENT1 採購單編號 PO_HEADER_ID 採購單 ID VENDOR_ID 供應商 ID VENDOR_SITE_ID 供應商地點 ID TERMS_ID 付款條件 TYPE_LOOKUP_CODE 採購單類型 主要相關 TABLE\rTABLE Data PO_AGENTS / PO_AGENTS_V 採購員 PO_VENDORS/ PO_VENDOR_SITES_ALL 供應商/供應商地點 AP_TERMS_TL 付款條件 PO_LINES_ALL\r說明\r採購訂單明細表 ，記錄向這個供應商買哪些東西，例如 item1，item2。\nFOREIGN KEY\rPO_LINES_ALL.PO_HEADER_ID = PO_HEADERS_ALL.PO_HEADER_ID PO_LINE_LOCATIONS_ALL\r說明\r同一採購訂單行的品項可能會送去不同的地點，此表記錄物料送貨情況：\n送貨到自己公司的兩個不同的收貨地點，如分別在台北和新竹收貨。\n或者是同一收貨地點，但是兩個不同的送貨時間，如在新竹收貨，一批在 7 月收貨，一批在 8 月收貨。\n表中還會記錄到收料、退料、開發票的數量情況。\nFOREIGN KEY\rPO_LINE_LOCATIONS_ALL.PO_LINE_ID = PO_LINES_ALL.PO_LINE_ID PO_DISTRIBUTIONS_ALL\r說明\r分配的不同使得需要對應到不同的費用會計科目，或者費用需由不同的部門來承擔，則可在分配行中操作。 FOREIGN KEY\rPO_DISTRIBUTIONS_ALL.LINE_LOCATION_ID = PO_LINE_LOCATIONS_ALL.LINE_LOCATION_ID PO_RELEASES_ALL\r說明\r當客戶或供應商已同意在某個特定時期內以特定價格購買或提供一定數量的某個項目時，就會形成一份總括合約。\n","date":"Oct 11","permalink":"http://localhost:1313/post/2022-10-11-oracle-erp-ebs-r12-po-intro/","tags":"R12","title":"PO - 採購單 | ORACLE ERP R12"},{"categories":"Blogging","contents":"CodePen 完成圖\n步驟\rStep 1\r先畫出理想的 HTML Mark up，簡單來講分成 3 層，最外層紅色的 .container，橘色的 .card，和螢光綠的 .card__header，.card__body 和 .card__footer。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card__header\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://source.unsplash.com/600x400/?computer\u0026#34; alt=\u0026#34;card__image\u0026#34; class=\u0026#34;card__image\u0026#34; width=\u0026#34;600\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card__body\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;tag tag-blue\u0026#34;\u0026gt;Technology\u0026lt;/span\u0026gt; \u0026lt;h4\u0026gt;What\u0026#39;s new in 2022 Techhhhhhhhhhhhhhh\u0026lt;/h4\u0026gt; \u0026lt;p\u0026gt; Lorem ipsum, dolor sit amet consectetur adipisicing elit. Saepe laudantium eos molestiae porro cum, doloribus, nostrum nisi error fugit optio rerum velit, eius sunt placeat vitae! Ipsam a mollitia cupiditate error sequi pariatur porro, in cum doloribus commodi voluptates. Nulla blanditiis ea dolore voluptas quaerat veniam aut asperiores sed quis. \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card__footer\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;user\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://i.pravatar.cc/40?img=1\u0026#34; alt=\u0026#34;user__image\u0026#34; class=\u0026#34;user__image\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;user__info\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;Jane Doe\u0026lt;/h5\u0026gt; \u0026lt;small\u0026gt;2h ago\u0026lt;/small\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card__header\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://source.unsplash.com/600x400/?food\u0026#34; alt=\u0026#34;card__image\u0026#34; class=\u0026#34;card__image\u0026#34; width=\u0026#34;600\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card__body\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;tag tag-brown\u0026#34;\u0026gt;Food\u0026lt;/span\u0026gt; \u0026lt;h4\u0026gt;Delicious Food\u0026lt;/h4\u0026gt; \u0026lt;p\u0026gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. Sequi perferendis molestiae non nemo doloribus. Doloremque, nihil! At ea atque quidem! \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card__footer\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;user\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://i.pravatar.cc/40?img=2\u0026#34; alt=\u0026#34;user__image\u0026#34; class=\u0026#34;user__image\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;user__info\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;Jony Doe\u0026lt;/h5\u0026gt; \u0026lt;small\u0026gt;Yesterday\u0026lt;/small\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card__header\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://source.unsplash.com/600x400/?car,automobile\u0026#34; alt=\u0026#34;card__image\u0026#34; class=\u0026#34;card__image\u0026#34; width=\u0026#34;600\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card__body\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;tag tag-red\u0026#34;\u0026gt;Automobile\u0026lt;/span\u0026gt; \u0026lt;h4\u0026gt;Race to your heart content\u0026lt;/h4\u0026gt; \u0026lt;p\u0026gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. Sequi perferendis molestiae non nemo doloribus. Doloremque, nihil! At ea atque quidem! \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card__footer\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;user\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://i.pravatar.cc/40?img=3\u0026#34; alt=\u0026#34;user__image\u0026#34; class=\u0026#34;user__image\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;user__info\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;John Doe\u0026lt;/h5\u0026gt; \u0026lt;small\u0026gt;2d ago\u0026lt;/small\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Step 2\r在 .container 設定 flex container，可以使 .card變成 flex item， 加入flex-wrap: wrap; 是希望寬度不夠時，flex item 在 ltr 的方向，最右邊的 flex item 可以自己換到下一行。\n1 2 3 4 .container { display: flex; flex-wrap: wrap; } Step 3\r希望將 .card 裡面的 .card__header，.card__body，和 .card__footer 垂直排列，因此我們需要將 .card 變成 flex container，並將 flex-direction: column。\n在桌機或是筆電的大螢幕下，我們希望 item 可以在一個 row 可以一次顯示 3 個，因此一個 item 的 width 大約是 30%，並隨著螢幕的縮小，每一個 row 所放的 item 愈來愈少，直到一個 row 只有一個 item。\n1 2 3 4 5 6 .card { display: flex; flex-direction: column; width: 30%; padding: 1rem; } 1 2 3 4 5 @media all and (max-width: 768px) { .card { width: 100%; } } 上圖還未加 media query\n已加入 media query\nStep 4\r將照片依照等比例縮小。\n1 2 3 4 5 .card .card__header .card__image { max-width: 100%; max-height: 100%; object-fit: contain; } Step 5\r1 2 3 4 .card .card__body { flex: 1 0 auto; margin-top: 0.5rem; } 最重要的步驟，我們需要將 .card__body 的高度維持最大化，也就是頭像永遠都會在底部，圖片都會占一定的高度，其他的部分都是 .card__body。\n先來分析 flex: 1 0 auto;\n1 2 3 flex-grow: 1; flex-shrink: 0; flex-basis: auto; flex-grow: 1;，預設值爲 0。依照 flex item 的設定比例分配剩餘空間，因為 flex-grow 預設值為 0，所以如果只有一個 flex item 設定 flex-grow: 1，表示如果有剩餘的空間，會將這空間都分配給設定 flex-grow: 1 的 flex item，以這一個例子就是 .card__body。\nflex-shrink: 0;，預設值爲 1，表示空間如果不夠分，flex item 會等比例縮小。如果將 flex-shrink: 0;，表示我們要讓 flex item 不隨著 flex container 的大小跟著改變，flex item 該是多大就是多大。以這一個例子，將 .card__body 設定為 flex-shrink: 0;，並不會壓縮到 .card__body 的空間，而是壓到其他 .card__header 和 .card__footer 的空間。\nflex-basis: auto，設定 flex item 在 main axis 上的預設大小，如果 main axis 為水平線，表示 flex container 的 flex-direction: row，flex-basis 將設定 flex item 的高度。如果 main axis 為垂直線，表示 flex container 的 flex-direction: column，flex-basis 將設定 flex item 的寬度。\nStep 6\r剩下其他的 styling，使用 comment 的方式快速帶過。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 /* style h4 標題 */ .card .card__body h4 { letter-spacing: 1px; font-size: 1.5rem; text-transform: capitalize; margin-top: 0.5rem; /* h4 標題如果超過 2 行，則用 ... 表示 */ display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; } /* p如果超過 4 行，則用 ... 表示 */ .card .card__body p { display: -webkit-box; -webkit-line-clamp: 4; -webkit-box-orient: vertical; overflow: hidden; } /* 頭像和 username，日期並排 */ .card .card__footer .user { display: flex; margin-top: 0.5rem; } /* 頭像呈現圓形狀 */ .card .card__footer .user .user__image { border-radius: 50%; margin-right: 0.5rem; } 如果希望 .card的 border 有 glassmorphism 的效果，可以在 .card 加入以下的 css code。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 .card { /* 原本有的 */ display: flex; flex-direction: column; border: 1px solid red; width: 30%; padding: 1rem; margin-top: 0.5rem; /* glassmorphism styling */ background: rgba(255, 255, 255, 0.2); box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37); backdrop-filter: blur(4px); -webkit-backdrop-filter: blur(4px); border-radius: 10px; border: 1px solid rgba(255, 255, 255, 0.18); } 結果圖\r參考資料\rAn equal height grid using Flexbox\n","date":"Oct 03","permalink":"http://localhost:1313/post/2022-10-09-an-equal-height-div-using-flexbox/","tags":"css flexbox","title":"如何讓 flex item 等高? | css"},{"categories":"Blogging","contents":"\n範例\rCodePen 範例\n1 2 3 4 5 6 \u0026lt;div class=\u0026#34;img-wrap\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://images.unsplash.com/photo-1615147342761-9238e15d8b96?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D\u0026amp;ixlib=rb-1.2.1\u0026amp;auto=format\u0026amp;fit=crop\u0026amp;w=1001\u0026amp;q=80\u0026#34; alt=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 body { display: flex; justify-content: center; align-items: center; width: 100vw; height: 100vh; margin: 0; padding: 0; } .img-wrap { border: 1px solid green; width: 50%; height: 50%; } .img-wrap img { width: 100%; height: 100%; object-fit: contain; } 解說\r先設定圖片的容器的 width 和 height\n使用絕對單位或是相對單位都可以\n將 img 設定 width: 100%; height: 100%; 可以將 img 吃到父元素的高度 100%，寬度 100%\n使用 object-fit 可以決定圖片填滿方式的屬性 object-fit: contain; 可以保持圖片原有寬高比例進行縮放，使圖片顯示完整。\n更多 object-fit 的屬性介紹可以參考這裡\n參考資料\rHow do I fit an image (img) inside a div and keep the aspect ratio?\nmdn web docs - object-fit\n","date":"Oct 03","permalink":"http://localhost:1313/post/2022-10-03-how-to-remain-image-aspect-ratio-in-a-div/","tags":"css","title":"如何讓 image 塞進一個 div 裡面並維持解析度? | css"},{"categories":"Blogging","contents":"\r說明\r從打開封裝，拉 component，到執行封裝，這一段的過程都要驗證資料是否正確。\n此圖為官方版說明。\n如果 ValidateExternalMetadata = True，在設計封裝的時候， SSIS 就會連到外面的資料庫來比對資料正不正確，所以就會有紅色的 X。\n設定 ValidateExternalMetadata = False，在設計封裝的時候， SSIS 就不會比對外部的資料正不正確，直到執行這一個 OLEDB 的時候才會驗證資料。\n","date":"Sep 30","permalink":"http://localhost:1313/post/2022-09-30-ssis-validatemeta-data-attribute-intro/","tags":"ssis","title":"SSIS ValidateExternalMetaData | SSIS"},{"categories":"Blogging","contents":"\rINDEX\r主要以下的特點：\nIndex 加快從 Table 或 View 中拿到資料的速度 Index 的值可以為一個或是多個值，這一些值會從 Table 或是 View 來的 Index 會存在一個資料結構叫做 B-tree 中 Index 可以分成 2 種：\nCLUSTERED INDEX (叢集索引) NON-CLUSTERED INDEX (非叢集索引) CLUSTERED INDEX (叢集索引)\rClustered Index 可以將 View 或是 Table 中的資料依照 Index 的 Value 排序後儲存 因為資料本身只能以一種順序排序，所以每個 Table 只能有一個 Clustered Index 只有當 Table 包含 Clustered Index 時，Table 中的資料才會以排序順序儲存 Table 有 Clustered Index 時，Table 又稱為 Clustered Table (叢集資料表) 如果 Table 沒有任何 Clustered Index，它的資料就儲存在未排序的資料結構中，這個資料結構稱為 Heap (堆積)。 Non-clustered Index (非叢集索引)\rNon-clustered Index 包含 Non-clustered Index Value (非叢集索引鍵值)， Non-clustered Index Value 可以是一個或是多個，為 Table 中的欄位。而每個 Non-clustered Index Value 都有一個 Pointer，指向包含 Non-clustered Index Value 的資料，也就是 Table 裡的欄位資料。 Non-clustered Index Value 的 Pointer 稱為 Row Locator (資料列定位器)。Row Locator 的資料結構須要看資料儲存是在 Heap 或 Clustered Table 而定。若是 Heap，Row Locator 是指向 Pointer。 若是 Clustered Table，Row Locator 就是 Clustered Index。 共通點\r每當修改 Table 的資料時，就會自動維護資料表或檢視的索引。 Clustered Index 與 Non-clustered Index 都可以是 Unique 或是不是 Unique，Unique 表示資料值不能重複，不是 Unique 表示資料值可以重複。 Query Optimizer 如何使用 Index\r建立好的 Index 可以降低磁碟 I/O 作業並耗用較少的系統資源，因此可改善查詢效能。 當執行 SELECT、UPDATE、DELETE 或 MERGE 時， Query Optimizer 會評估每個擷取資料的可用方法。 擷取資料的可用方法可以分成 2 種 Table Scan 掃描一個或是多個 Index Table Scan (資料表掃描)\r當執行 Table Scan 時，Query Optimizer 可以讀取 Table 中的所有資料，並擷取符合查詢條件的資料列。 Table Scan 將產生許多磁碟 I/O 作業，而且可能需要大量資源。 使用 Index 掃描\r當 Query Optimizer 使用 Index 掃描時，它會搜尋 Index Value 、尋找查詢所需的資料之儲存位置，並從該位置擷取符合的資料。 一般而言，搜尋 Index 會比搜尋 Table 更快。 參考資料\rClustered and Non-clustered indexes described\n","date":"Sep 29","permalink":"http://localhost:1313/post/2022-09-29-clustered-index-and-nonclustered-index-intro/","tags":"sql","title":"Clustered Index \u0026 Non-Clustered Index | sql"},{"categories":"Snippets","contents":"不知道為什麼，每一次只要有 FROM 或是 INNER JOIN 在 UPDATE 裡面都會忘記怎麼寫，大概是寫的不夠多吧，特別筆記一下。\n1 2 3 4 5 6 UPDATE A SET A.X = B.X FROM A INNER JOIN B ON A.ID = B.ID ","date":"Sep 27","permalink":"http://localhost:1313/post/2022-09-27-mssql-update-query/","tags":"sql","title":"MSSQL Update Query | SQL"},{"categories":"Snippets","contents":"因為 CTE 無法使用 2 個以上的 QUERIES，所以使用 TEMP TABLE 代替 CTE。也因為資料量較大(有 20 多萬筆)，所以我選擇 TEMP TABLE，而不是 TABLE VARIABLE。\n刪除 TEMP TABLE 將 SUB QUERY 的資料使用 SELECT \u0026hellip; INTO 加到 TEMP TABLE SELECT \u0026hellip; INTO 會 CREATE 一個 TEMP TABLE 並將資料 INSERT 到 TEMP TABLE 中\nTEMP TABLE 的資料來源可以是別的 DATA SOURCE。例如：ORACLE\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 DROP TABLE IF EXISTS #TEMP_TABLE; SELECT INSERTED.NAME, INSERTED.ID INTO #TEMP_TABLE FROM ( SELECT A.NAME, A.ID FROM ( SELECT * FROM OPENQUERY(ANOTHER_DB_SOURCE, \u0026#39; SELECT A.NAME, A.ID FROM A\u0026#39; ) ) ANOTHER_DB_SOURCE_QUERY INNER JOIN ( SELECT * FROM B ) B ON B.ID = ANOTHER_DB_SOURCE_QUERY.ID ) INSERTED ","date":"Sep 27","permalink":"http://localhost:1313/post/2022-09-27-create-a-temp-table-with-openquery/","tags":"sql","title":"使用 OPENQUERY 新增 Temp Table | SQL"},{"categories":"Blogging","contents":"\nRetainSameConnection 的預設值為 False，為什麼?\r當RetainSameConnection=false，SSIS 的每個工作在開始使用和資料庫連線時才會打開連線，在工作結束時，關閉連線。\n因此每個工作都會打開和關閉連線，且每個工作所使用的連線都是不同的。\n以上面的圖片，執行 SQL 工作和資料流程工作的連線就會不是同一條，即便他們都是連到同一個資料庫。\n當初的用意應該是如果執行 SQL 工作和資料流程工作用的是不同的資料庫連線，例如執行 SQL 工作連到的是 ORACLE DB，資料流程工作連到的是 SQL SERVER，當執行完執行 SQL 工作完成時，資料流程工作其實用不到 ORACLE 的連線，所以就會在完成執行 SQL 工作結束時關閉連線。\n這也是合理的，因為有一些工作流程可能是打開檔案，發送信件，那麼打開檔案，發送信件這一些工作就不需要資料庫的連線，因此也不會浪費資源。\nTemp Table\r當RetainSameConnection=true，表示只要一執行封裝，連線就會打開，直到整個封裝執行結束。以剛剛的圖做舉例，如果我們在執行 SQL工作裡面新增一個 Temp Table，那麼資料流程工作也可以存取這一個 Temp Table，因為執行 SQL工作和資料流程工作連線是一樣的，資源還沒有被釋放掉，Temp Table 還會存在 DB 裡面。\n但是如果RetainSameConnection=false，表示每一個的工作連線都是獨立的，如果在執行 SQL工作新增 Temp Table，資料流程工作就不會存取到這一個 Temp Table，因為 Temp Table 早就因為執行 SQL工作結束跟著一起被連線釋放掉。\n參考資料\rWhat is the RetainSameConnection Property of OLEDB Connection in SSIS?\n使用 Connetion 的屬性 RetainSameConnection\n","date":"Sep 27","permalink":"http://localhost:1313/post/2022-09-28-ssis-remainsameconnection-intro/","tags":"sql ssis","title":"使用 SSIS 的 RetainSameConnection 屬性 | SSIS"},{"categories":"Debugging","contents":"\n問題：\n當 web.config 需要存檔時，會跳出另存新檔的視窗，且再存檔時，會跳出「由於另一個處理序正在使用檔案」。\n解決方案：\n開啟工作管理員， 將 Microsoft.VisualStudio.Web.Host.exe 結束工作即可。\n","date":"Sep 22","permalink":"http://localhost:1313/post/2022-09-22-webconfig-cant-save/","tags":"c#","title":"web.config 無法存檔，跳出另存新檔視窗 | c#"},{"categories":"Debugging","contents":"\n問題：\n未設定所要求 URL 的預設文件，且未在伺服器上啟用瀏覽目錄。\n解決方法：\n其實下面有提示解決方法，「確認網站或應用程序配置文件中的 configuration/system.webServer/directoryBrowse@enabled 屬性已設置為 true。」\n實際的運作：\n在專案中打開 web.config 檔案 將\u0026lt;system.webServer\u0026gt;加入 web.config 並將以下 2 個 tag 寫入\u0026lt;system.webServer\u0026gt;裡面 \u0026lt;directoryBrowse enabled=\u0026quot;true\u0026quot; /\u0026gt;\n\u0026lt;modules runAllManagedModulesForAllRequests=\u0026quot;true\u0026quot; /\u0026gt;\n更正後的 web.config 大概會長這樣：\n\u0026lt;configuration\u0026gt;\r\u0026lt;system.webServer\u0026gt;\r\u0026lt;directoryBrowse enabled=\u0026#34;true\u0026#34; /\u0026gt;\r\u0026lt;modules runAllManagedModulesForAllRequests=\u0026#34;true\u0026#34; /\u0026gt;\r\u0026lt;/system.webServer\u0026gt;\r\u0026lt;/configuration\u0026gt; 參考資料：\nHow to enable Directory browsing by default on IIS Express\n","date":"Sep 22","permalink":"http://localhost:1313/post/2022-09-22-enable-directory-browsing-by-default-on-iis-express/","tags":"c#","title":"未設定所要求 URL 的預設文件，且未在伺服器上啟用瀏覽目錄 | c#"},{"categories":"Blogging","contents":"在 JS 的世界裡面，string 是 immutable，表示 string 裡面的內容物是不可以變動的。 這是什麼意思，我們看以下的例子就知道。\n範例\r今天我們想要讓 string 這一個字串從 Jesse 變成 Aesse 該怎麼做?\n以下步驟：\n先設定一個變數叫做 student 將 student assign 給 Jesse 再將 student 的第 0 號位置變成 A 1 2 3 4 5 6 7 // 先設定一個變數叫做 student 並且 value 設為 Jesse let student = \u0026#34;Jesse\u0026#34;; console.log(student); // 將第 0 號位置重新assign，從 J 變成 A student[0] = \u0026#34;A\u0026#34;; console.log(student); 看到這心想應該是沒什麼問題吧，結果拿到 console 一跑，會發現 student 怎麼還是 Jesse?\n會發生這種事情，是因為 string 有 immutabllity，裡面的任何字元都不可以變動。所以使用 student[0] assign 是行不通的。\n但我們還是很想讓 Jesse 變成 Aesse 該怎麼做?\n其實只要 reassign student 這一個變數即可。\n1 2 3 4 5 6 let student = \u0026#34;Jesse\u0026#34;; console.log(student); // Jesse // 重新 assign 一整個 student 變數 student = \u0026#34;Aesse\u0026#34;; console.log(student); // Aesse 參考資料\rstring in javascript are immutable, but when we use let with strings , it becomes changeable,\n","date":"Sep 04","permalink":"http://localhost:1313/post/2022-09-04-string-immutable/","tags":"javascript","title":"String values are immutable | JavaScript"},{"categories":"Blogging","contents":"自從 JS 在 2015 年推出大改版後，相信大家都看過非常多 var，let，const 的文章，雖然現已 2022，但有許多 legacy project 還是使用 var 來定義變數，就讓我們再了解一次 var 和 let 有何不同吧。\n結論： 用 var 定義的變數可以輕易的被重新賦值，但是 let 不行。\n1 2 3 var student = \u0026#34;Jesse\u0026#34;; var student = \u0026#34;Tracy\u0026#34;; console.log(student); 這一段程式碼，表示一開始 student 這一個變數是 assign 給 Jesse，但是下一行又將 student 變數 assign Tracy，console.log 出來的結果並沒有 error，是 log Tracy。\n雖然這樣 assign 很方便，但是也增加 debug 的困難度，因為如果是大型專案，在寫得時候如果沒有注意到前面有使用，就容易將 variable 重新 assign。\n所以 ES6 推出 let + const 希望能取代 var，增加 debug 的效率。\n我們來看看如果使用 let 在 console 上，會發生什麼事?\n1 2 3 let student = \u0026#34;Jesse\u0026#34;; let student = \u0026#34;Tracy\u0026#34;; console.log(student); Uncaught SyntaxError: Identifier \u0026lsquo;student\u0026rsquo; has already been declared\n答案是會有 error，因為 student 已經被定義過一遍了，不能再使用 student 再定義一次。 如果需要 override student 直接 assign 即可。\n1 2 3 let student = \u0026#34;Jesse\u0026#34;; student = \u0026#34;Tracy\u0026#34;; console.log(student); 參考資料：\nExplore Differences Between the var and let Keywords\nHow the let, const, and var Keywords Work in JavaScript\n","date":"Sep 01","permalink":"http://localhost:1313/post/2022-09-01-var-let-differeneces/","tags":"javascript","title":"var vs let - Part 1 | JavaScript"},{"categories":"Snippets","contents":"disabled input 是無法將 value 傳至 controller，但是我們仍需要用到 value，此時需要怎麼做?\n解決辦法：\n將 disabled input 塞進一個 id 或是 class。\n在 submit form 的時候，使用 jQuery 的 removeAttr method，將 disabed 這一個屬性拿掉，這樣就可以在 controller 拿到 value 囉。\n以下為 pseudo code，請參考。\n1 @Html.CheckBoxFor(m =\u0026gt; m.isUsed, new { @disabled=\u0026#34;disabled\u0026#34;, @class=\u0026#34;disabledCheckbox\u0026#34;} ) 1 2 3 $(\u0026#34;#TestForm\u0026#34;).submit(function () { $(\u0026#34;#CheckBoxId\u0026#34;).removeAttr(\u0026#34;disabled\u0026#34;); }); 參考資料： How do I submit disabled input in ASP.NET MVC?\n","date":"Aug 31","permalink":"http://localhost:1313/post/2022-08-31-pass-disabled-input-to-controller/","tags":"javascript","title":"Disabled Input 傳至 Controller | JavaScript"},{"categories":"Snippets","contents":"JSFiddle 範例\n使用 v-on:keyup.enter='function name' 綁定 input 或是 form。\n起初寫的時候，以為 v-on:keyup.enter 要綁在 button 上，但是實際上其實是 form (或是其他的 input)， 以 form 為主體， trigger Enter 鍵之後，呼叫 login function，即可執行成功。\n1 2 3 4 5 6 7 \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;form v-on:keyup.enter=\u0026#34;login\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; @click=\u0026#34;login\u0026#34;\u0026gt;Login\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; 1 2 3 4 5 6 7 8 new Vue({ el: \u0026#34;#app\u0026#34;, methods: { login() { alert(\u0026#34;CLICKED!\u0026#34;); }, }, }); 參考資料: On key press of Enter, click a button in vuejs\n","date":"Aug 31","permalink":"http://localhost:1313/post/2022-08-29-use-enter-to-trigger-function-vue-js/","tags":"vue.js","title":"點擊 Enter 之後，執行某一支 Function | Vue.js"},{"categories":"Snippets","contents":"從 string data type 轉成 int 中間出的變化會非常多，有可能 input string 是空字串， input string 也有可能是 backctick\u0026hellip;等，一堆很奇怪的符號，這邊我使用我自己在專案中有使用的，並不保證大家都能夠判斷正確。\nparseFloat(input string)\n檢查是否為 NaN\n如果是，則不是 Numeric Value\n反之，則是 Numeric Value\n1 2 3 4 5 6 7 function isNumeric(str) { if (typeof str != \u0026#34;string\u0026#34;) return false; // we only process strings! return ( !isNaN(str) \u0026amp;\u0026amp; // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)... !isNaN(parseFloat(str)) ); // ...and ensure strings of whitespace fail } 參考資料: How can I check if a string is a valid number?\n","date":"Aug 29","permalink":"http://localhost:1313/post/2022-08-29-is-input-string-numeric/","tags":"javascript","title":"確認 input string 是否為數字 | JavaScript"},{"categories":"Blogging","contents":"\r設置步驟\r這一篇主要紀錄設定 Github 的 SSH key - Windows 11 版本\n安裝 Git ：下載網址 git --version\n如果不確定電腦有沒有安裝 Git，可以使用 git --version 確認，如果有，會顯示安裝的版本，如果沒有，請去官網下載，基本上只要一直按下一步即可。\n產生 SSH key 為 4 個步驟。\nssh-keygen\r按下 Enter - 使用預設路徑，檔案\r按下 Enter - 不使用密碼保護私鑰\r按下 Enter - 確認上述動作 使用 ssh-keygen 可以產生 SSH key ，接下來會被問到你想要把 SSH key 放在哪一個 file，直接按下 Enter，即是放在預設路徑，檔案。\n完成檔案新增後，會要求輸入 passphrase，passphrase 就是密碼，這一個密碼可以用來保護私鑰，雖然設置密碼保護私鑰能多一層的保障，但是每一次執行 Git 時就會被要求輸入密碼，這倒是一大缺點，這裡我不使用密碼。\n按下 Enter 後會被要求再輸入一次密碼，如果剛剛沒有設定密碼，直接按 Enter，反之打上剛剛設定的密碼。\n如果有看到像是亂碼的東西，表示 SSH Key 已經新增成功，如要看 SSH Key 放在哪一個檔案，可以到 C 槽的使用者底下有一個 .ssh 的資料夾，點開後就會有檔案 (假設使用的是預設路徑)。\nid_rsa 存放的是 Private Key id_rsa.pub 存放的是 Public Key 將 SSH Key 加入 Github 開啟 id_rsa.pub ，這邊可以使用任何的 text editor，我使用的是 Notepad++，打開之後會如圖所示。 將上述的文字全選之後複製，貼在我們自己的 Github 上。\n貼上之後加入 Title，點擊 Add SSH key 按鈕，Github 會要求輸入密碼，輸入後就完成 SSH key 的設定。\n完成圖\n測試\r這邊我隨便打開一個 repo，使用 SSH clone\n複製完網址後貼到 VSCODE 即可。\nBugs\r如果 clone 遇到 Git error: \u0026quot;Host Key Verification Failed\u0026quot; when connecting to remote repository\n只要在 Git Bash 打上 ssh -T git@github.com ，並打 yes，就可以成功 clone repo。\n參考資料：\n[2022] How to Set Up your SSH key for GitHub on Windows 10\nGit error: \u0026ldquo;Host Key Verification Failed\u0026rdquo; when connecting to remote repository\n","date":"Aug 27","permalink":"http://localhost:1313/post/2022-08-27-setup-ssh-key-win11/","tags":"git","title":"設置 Git SSH key - Windows11 版本 | Git"},{"categories":"Snippets","contents":"搭配 LINQ 和 string.Join()，將 List\u0026lt;自定義的 class\u0026gt; 轉成以逗號分隔字串。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 void Main() { // 新增一個 User List 叫做 result List\u0026lt;User\u0026gt; result = new List\u0026lt;User\u0026gt;(); // 加入 3 個 object 到 result，分別為 Sharon，John 和 Bobby result.Add(new User(1, \u0026#34;Sharon\u0026#34;, \u0026#34;User\u0026#34;, \u0026#34;sharon\u0026#34;)); result.Add(new User(2, \u0026#34;John\u0026#34;, \u0026#34;User\u0026#34;, \u0026#34;john\u0026#34;)); result.Add(new User(3, \u0026#34;Bobby\u0026#34;, \u0026#34;Admin\u0026#34;, \u0026#34;bobby\u0026#34;)); // 使用 string.Join()，將 result 的 name attribute 用 \u0026#34;, \u0026#34; 串起來 Console.WriteLine(string.Join(\u0026#34;, \u0026#34;, result.Select(x =\u0026gt; x.name).ToList())); } // Define other methods and classes here public class User { public int id {get; set;} public string name {get; set;} public string type {get; set;} public string username {get; set;} public User(int id, string name, string type, string username) { this.id = id; this.name = name; this.type = type; this.username = username; } } 結果： 參考資料：\rC# List\u0026lt;string\u0026gt; to string with delimiter\n","date":"Aug 24","permalink":"http://localhost:1313/post/2022-08-24-combine-attribute-with-list/","tags":"c# LINQ","title":"List\u003c自定義的 class\u003e 轉成以逗號分隔字串 | c#"},{"categories":"Snippets","contents":"使用 Array.prototype.some() 和 Array.prototype.filter()，找出 2 個 array 至少有一個相同的元素。\nsome() 接收到的參數是一組公式，如果 array 的某一個元素有符合此公式，立即回傳 true，如遍歷整個 array 都找不到則回傳 false。\nfilter() 接收到的參數也是一組公式，不過跟 some() 不一樣的地方是 filter() 經過公式的運算後，會回傳一個新的陣列。\n範例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var result1 = [ { id: 1, name: \u0026#34;Sandra\u0026#34;, type: \u0026#34;user\u0026#34;, username: \u0026#34;sandra\u0026#34; }, { id: 2, name: \u0026#34;John\u0026#34;, type: \u0026#34;admin\u0026#34;, username: \u0026#34;johnny2\u0026#34; }, { id: 3, name: \u0026#34;Peter\u0026#34;, type: \u0026#34;user\u0026#34;, username: \u0026#34;pete\u0026#34; }, { id: 4, name: \u0026#34;Bobby\u0026#34;, type: \u0026#34;user\u0026#34;, username: \u0026#34;be_bob\u0026#34; }, ]; var result2 = [ { id: 2, name: \u0026#34;John\u0026#34;, email: \u0026#34;johnny@example.com\u0026#34; }, { id: 4, name: \u0026#34;Bobby\u0026#34;, email: \u0026#34;bobby@example.com\u0026#34; }, ]; // 找出 result1 和 result2 相同的 id 之後 // 回傳一個新 array result1.filter((o1) =\u0026gt; result2.some((o2) =\u0026gt; o1.id === o2.id)); // 找出 result1 和 result2 不同的 id 之後 // 回傳一個新 array result1.filter((o1) =\u0026gt; !result2.some((o2) =\u0026gt; o1.id === o2.id)); 結果圖： 參考資料：\rmdn web docs - Array.prototype.some()\nmdn web docs - Array.prototype.filter()\n","date":"Aug 24","permalink":"http://localhost:1313/post/2022-08-24-two-array-comparisions/","tags":"javascript","title":"2 陣列中找出至少有一個相同之元素 | JavaScript"},{"categories":"Blogging","contents":"有一天我被我主管問到這件事，若企業網站使用 AD 驗證方式登入帳密，使用 POST 的方式將未加密的帳密傳至伺服器中，整個過程都是使用內網，有沒有可能會被壞人竊取帳號密碼? (假設沒有惡意主動攻擊的狀況下)\n上網查了之後發現，應該是不太可能的，原因如下：\n企業網站登入流程如下：\n會先啟用 SSL\n到入登入頁面\n使用者輸入帳密\n密碼傳至 API 做驗證\n在這過程中帳密皆會以 SSL 加密的方式送出，如果壞人在這中間擷取封包，所拿到的東西也都是加密過後的東西，當然 HTTPS 或是 SSL 並不保證是安全的，所以如果再進一步破解，也是有可能竊取帳密，但並不會這麼容易的讓壞人將密碼看透透。\n資安的世界其實很複雜，攻擊的一方一定會站的比較上風，大部分的東西放在網路上其實都不安全，最安全是手寫放在保險箱(哈哈)，但目前企業都在推動數位轉型，很多資料都會放在網路上做彙整，我們只能做最壞的打算，進行最大的防護。\n如有不同的想法，歡迎留言討論。\n參考資料： HTTPS 的連線夠安全嗎？\n","date":"Aug 19","permalink":"http://localhost:1313/post/2022-08-19-is-attacking-available-when-using-ad-login-auth/","tags":"security ad","title":"AD 驗證有可能造成資安問題嗎?"},{"categories":"Debugging","contents":"錯誤訊息：\nDataFlow:錯誤: 寫入 Table_A.輸入[OLE DB 目的地輸入] 上的 寫入 Table_A 輸入[OLE DB 目的地輸入].資料行[Column_A] 發生錯誤。傳回的資料行狀態是: \u0026ldquo;值違反資料行的完整性條件約束。\u0026quot;。\n解決方法：\nTable_A.Column_A 不接受 NULL，但是傳入的資料是 NULL\n","date":"Jul 19","permalink":"http://localhost:1313/post/2022-07-19-ssis-value-constraint/","tags":"ssis","title":"值違反資料行的完整性條件約束"},{"categories":"Snippets","contents":"寫法一：\n1 2 3 4 5 6 7 SELECT * FROM ( SELECT * FROM TABLE_A ORDER BY TABLE_A.COLUMN_A DESC ) WHERE ROWNUM \u0026lt;= 5; 寫法二：\n1 2 3 4 SELECT * FROM TABLE_A ORDER BY TABLE_A.COLUMN_A DESC OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY; 寫法三： (Ask Tom) 速度最快\n1 2 3 4 5 6 7 SELECT * FROM ( SELECT a.*, ROWNUM rnum FROM ( SELECT * FROM TABLE_A ORDER BY TABLE_A.COLUMN_A DESC ) a WHERE ROWNUM \u0026lt;= MAX_ROW ) WHERE rnum \u0026gt;= MIN_ROW 寫法四：\n1 2 3 4 5 6 SELECT * FROM ( SELECT * FROM TABLE_A ORDER BY TABLE_A.COLUMN_A DESC ) WHERE ROWNUM BETWEEN MIN_ROW AND MAX_ROW ","date":"Jul 13","permalink":"http://localhost:1313/post/2022-07-13-oracle-sql-limit-number-of-rows-after-ordering/","tags":"oracle-sql","title":"排序後再 SELECT TOP N 筆資料"},{"categories":"Snippets","contents":"\r目的\rOracle SQL 定義變數跟 SQL Server 的用法十分不一樣(踩到非常多坑啊 😭)，所以這一篇主要紀錄 Oracle SQL 定義變數 的 VARIABLE 和 DEFINE。\nDEFINE 的 VARIABLE 的差別\rDEFINE 的目的是替代變數，在 client 端執行解析，需要加入\u0026amp;在變數名稱前面，且必須要有變數名稱和預設值。不可以指定 data type，唯一的 data type 為 char。\n語法：\nDEFINE variable_name = value\nVARIABLE 的目的是綁定變數，在 server 端執行解析，需要加入:在變數名稱前面，可以綁定多種 data type。\n語法：\nVARIABLE variable_name data_type\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 -- 先定義 VARIABLE variable_name data_type VARIABLE po_header_ids VARCHAR2(1000); -- 如果需要賦予預設值，必須在 variable_name 前面加入 :，也就是 :variable_name -- := 在 ORACLE SQL 表示 ASSIGN BEGIN :po_header_ids := \u0026#39;1,2,3\u0026#39;; END; / SELECT PHA.SEGMENT1 FROM PO.PO_HEADERS_ALL PHA WHERE :po_header_ids = \u0026#39;0\u0026#39; OR :po_header_ids IS NULL OR PHA.PO_HEADER_ID IN ( SELECT TO_NUMBER(regexp_substr(:po_header_ids,\u0026#39;[^,]+\u0026#39;,1,level)) FROM dual CONNECT BY regexp_substr(:po_header_ids ,\u0026#39;[^,]+\u0026#39;,1,level) IS NOT NULL ); 參考資料\rDeclare bind variable in the Oracle SQL Developer\nOracle 變數定義的三種方式(define,variable,declare)\n","date":"Jul 11","permalink":"http://localhost:1313/post/2022-07-11-define-variables-oracle-sql/","tags":"oracle-sql","title":"定義變數"},{"categories":null,"contents":"","date":"Jan 01","permalink":"http://localhost:1313/articles/","tags":null,"title":"Articles"}]