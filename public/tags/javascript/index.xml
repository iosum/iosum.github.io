<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on 爆肝工程師 Casey</title>
    <link>http://localhost:1313/tags/javascript/</link>
    <description>Recent content in Javascript on 爆肝工程師 Casey</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Sep 2022 23:12:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>String values are immutable | JavaScript</title>
      <link>http://localhost:1313/post/2022-09-04-string-immutable/</link>
      <pubDate>Sun, 04 Sep 2022 23:12:00 +0800</pubDate>
      <guid>http://localhost:1313/post/2022-09-04-string-immutable/</guid>
      <description>在 JS 的世界裡面，string 是 immutable，表示 string 裡面的內容物是不可以變動的。 這是什麼意思，我們看以下的例子就知道。&#xA;範例&#xD;今天我們想要讓 string 這一個字串從 Jesse 變成 Aesse 該怎麼做?&#xA;以下步驟：&#xA;先設定一個變數叫做 student 將 student assign 給 Jesse 再將 student 的第 0 號位置變成 A 1 2 3 4 5 6 7 // 先設定一個變數叫做 student 並且 value 設為 Jesse let student = &amp;#34;Jesse&amp;#34;; console.log(student); // 將第 0 號位置重新assign，從 J 變成 A student[0] = &amp;#34;A&amp;#34;; console.log(student); 看到這心想應該是沒什麼問題吧，結果拿到 console 一跑，會發現 student 怎麼還是 Jesse?&#xA;會發生這種事情，是因為 string 有 immutabllity，裡面的任何字元都不可以變動。所以使用 student[0] assign 是行不通的。</description>
    </item>
    <item>
      <title>var vs let - Part 1 | JavaScript</title>
      <link>http://localhost:1313/post/2022-09-01-var-let-differeneces/</link>
      <pubDate>Thu, 01 Sep 2022 16:20:00 +0800</pubDate>
      <guid>http://localhost:1313/post/2022-09-01-var-let-differeneces/</guid>
      <description>自從 JS 在 2015 年推出大改版後，相信大家都看過非常多 var，let，const 的文章，雖然現已 2022，但有許多 legacy project 還是使用 var 來定義變數，就讓我們再了解一次 var 和 let 有何不同吧。&#xA;結論： 用 var 定義的變數可以輕易的被重新賦值，但是 let 不行。&#xA;1 2 3 var student = &amp;#34;Jesse&amp;#34;; var student = &amp;#34;Tracy&amp;#34;; console.log(student); 這一段程式碼，表示一開始 student 這一個變數是 assign 給 Jesse，但是下一行又將 student 變數 assign Tracy，console.log 出來的結果並沒有 error，是 log Tracy。&#xA;雖然這樣 assign 很方便，但是也增加 debug 的困難度，因為如果是大型專案，在寫得時候如果沒有注意到前面有使用，就容易將 variable 重新 assign。&#xA;所以 ES6 推出 let + const 希望能取代 var，增加 debug 的效率。&#xA;我們來看看如果使用 let 在 console 上，會發生什麼事?</description>
    </item>
    <item>
      <title>Disabled Input 傳至 Controller | JavaScript</title>
      <link>http://localhost:1313/post/2022-08-31-pass-disabled-input-to-controller/</link>
      <pubDate>Wed, 31 Aug 2022 11:00:00 +0800</pubDate>
      <guid>http://localhost:1313/post/2022-08-31-pass-disabled-input-to-controller/</guid>
      <description>disabled input 是無法將 value 傳至 controller，但是我們仍需要用到 value，此時需要怎麼做?&#xA;解決辦法：&#xA;將 disabled input 塞進一個 id 或是 class。&#xA;在 submit form 的時候，使用 jQuery 的 removeAttr method，將 disabed 這一個屬性拿掉，這樣就可以在 controller 拿到 value 囉。&#xA;以下為 pseudo code，請參考。&#xA;1 @Html.CheckBoxFor(m =&amp;gt; m.isUsed, new { @disabled=&amp;#34;disabled&amp;#34;, @class=&amp;#34;disabledCheckbox&amp;#34;} ) 1 2 3 $(&amp;#34;#TestForm&amp;#34;).submit(function () { $(&amp;#34;#CheckBoxId&amp;#34;).removeAttr(&amp;#34;disabled&amp;#34;); }); 參考資料： How do I submit disabled input in ASP.NET MVC?</description>
    </item>
    <item>
      <title>確認 input string 是否為數字 | JavaScript</title>
      <link>http://localhost:1313/post/2022-08-29-is-input-string-numeric/</link>
      <pubDate>Mon, 29 Aug 2022 23:11:00 +0800</pubDate>
      <guid>http://localhost:1313/post/2022-08-29-is-input-string-numeric/</guid>
      <description>從 string data type 轉成 int 中間出的變化會非常多，有可能 input string 是空字串， input string 也有可能是 backctick&amp;hellip;等，一堆很奇怪的符號，這邊我使用我自己在專案中有使用的，並不保證大家都能夠判斷正確。&#xA;parseFloat(input string)&#xA;檢查是否為 NaN&#xA;如果是，則不是 Numeric Value&#xA;反之，則是 Numeric Value&#xA;1 2 3 4 5 6 7 function isNumeric(str) { if (typeof str != &amp;#34;string&amp;#34;) return false; // we only process strings! return ( !isNaN(str) &amp;amp;&amp;amp; // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)... !isNaN(parseFloat(str)) ); // .</description>
    </item>
    <item>
      <title>2 陣列中找出至少有一個相同之元素 | JavaScript</title>
      <link>http://localhost:1313/post/2022-08-24-two-array-comparisions/</link>
      <pubDate>Wed, 24 Aug 2022 14:14:00 +0800</pubDate>
      <guid>http://localhost:1313/post/2022-08-24-two-array-comparisions/</guid>
      <description>使用 Array.prototype.some() 和 Array.prototype.filter()，找出 2 個 array 至少有一個相同的元素。&#xA;some() 接收到的參數是一組公式，如果 array 的某一個元素有符合此公式，立即回傳 true，如遍歷整個 array 都找不到則回傳 false。&#xA;filter() 接收到的參數也是一組公式，不過跟 some() 不一樣的地方是 filter() 經過公式的運算後，會回傳一個新的陣列。&#xA;範例：&#xA;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var result1 = [ { id: 1, name: &amp;#34;Sandra&amp;#34;, type: &amp;#34;user&amp;#34;, username: &amp;#34;sandra&amp;#34; }, { id: 2, name: &amp;#34;John&amp;#34;, type: &amp;#34;admin&amp;#34;, username: &amp;#34;johnny2&amp;#34; }, { id: 3, name: &amp;#34;Peter&amp;#34;, type: &amp;#34;user&amp;#34;, username: &amp;#34;pete&amp;#34; }, { id: 4, name: &amp;#34;Bobby&amp;#34;, type: &amp;#34;user&amp;#34;, username: &amp;#34;be_bob&amp;#34; }, ]; var result2 = [ { id: 2, name: &amp;#34;John&amp;#34;, email: &amp;#34;johnny@example.</description>
    </item>
  </channel>
</rss>
