<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Casey's Blog</title><link>https://caseyho.dev/post/</link><description>Recent content in Posts on Casey's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 28 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://caseyho.dev/post/index.xml" rel="self" type="application/rss+xml"/><item><title>網頁觸發按鈕執行 SP，SP 會執行 SSIS dtsx，如果在 SP 執行時將網頁關閉，SP 還會繼續執行嗎?</title><link>https://caseyho.dev/post/2023-03-28-close-window-to-stop-stored-proc/</link><pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2023-03-28-close-window-to-stop-stored-proc/</guid><description>如果在網頁上觸發按鈕執行的 stored procedure 中，執行了一個包含 SSIS 封裝的 dtsx 檔案，當你關閉網頁時，stored procedure 仍然會繼續執行。
這是因為在 SQL Server 中，stored procedure 通常在執行時是作為一個單獨的執行緒在運行的，而這個執行緒是獨立於網頁的。
換句話說，即使你關閉了網頁，stored procedure 仍然會在 SQL Server 上運行，直到其執行完成或被手動停止。
因此，希望停止 stored procedure 的執行，可以使用 SQL Server Management Studio 或 Transact-SQL 命令來停止其執行，具體方法可以參考前面的回答。
找到正在執行的 SP ID 找到 session ID
1 SELECT session_id FROM sys.dm_exec_requests WHERE session_id &amp;gt; 50 停止 Stored Procedure 的執行 &amp;lt;SPID&amp;gt; 是指正在執行 stored procedure 的 session ID
1 KILL &amp;lt;SPID&amp;gt;</description></item><item><title>View 簡介</title><link>https://caseyho.dev/post/2023-03-27-database-view-intro/</link><pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2023-03-27-database-view-intro/</guid><description>什麼是 View ? View 是 Select 完多個 Table 所組合而成的資料表，是一種 Virtual Structure，並且可以在資料表上進行 SELECT、INSERT、UPDATE、DELETE 的操作。
優點 SQL Server Database View 具有以下優點：
提供了一個簡單的方式來查詢多個 Table View 可以簡化複雜的查詢，並且讓使用者只查看他們需要的資訊，而不用顧慮底層的資料表結構 View 可以提高資料安全性，因為可以限制使用者只能查詢特定欄位 缺點 SQL Server Database View 也有一些缺點：
View 的效能可能會比直接查詢 Table 差，因為需要額外的資源和時間來處理 View View 可能會讓資料庫設計更複雜，因為需要考慮許多 Table 之間的關係 View 可能會增加資料庫的存儲空間，因為 View 通常需要儲存 Table 的複本 為什麼要使用 查詢多個 Table：如果需要查詢多個 Table 來取得所需資訊，使用 View 可以簡化這個過程，讓查詢更加簡單。 保持資料庫的一致性：透過 View，可以將 Table 的結構和應用程式分離，讓資料庫的設計更具有彈性，並且保持資料庫的一致性。 提高資料安全性：可以使用 View 來限制使用者只能查詢特定欄位，提高資料安全性。 常用的場景 通常會用到 View 的地方都是 Data Access 的時候，需要 LEFT JOIN 或是 INNER JOIN View</description></item><item><title>Automapper 簡介</title><link>https://caseyho.dev/post/2023-03-25-automapper-intro/</link><pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2023-03-25-automapper-intro/</guid><description>AutoMapper 是什麼 AutoMapper 是一個在 .NET 平台上使用的工具，它可以幫助開發人員更快速、更方便地處理不同物件之間的 Mapping。
什麼是物件之間的 Mapping，是指把一個物件的某些屬性自動地複製到另一個物件對應的屬性。
這樣描述似乎有一點複雜，可以參考以下範例和步驟。
使用步驟 透過 Nuget 安裝 AutoMapper 套件。
建立 DTO 和 Entity 類別，Click here
建立 Profile 類別，設定 Attribute Mapping 的關係，Click here
Setup AutoMapper，指定使用哪些 Profile 類別，Click here
在需要使用 AutoMapper 的地方，透過 Dependency Injection 或手動建立 IMapper 物件，使用 Map 方法進行類型轉換，Click here
範例 第二步 建立 DTO 和 Entity 類別，假設我們有一個 User class 和一個 UserInfo class，它們分別如下所示：
1 2 3 4 5 6 7 8 9 10 11 12 public class User { public int Id { get; set; } public string Name { get; set; } public int Age { get; set; } } public class UserInfo { public int Id { get; set; } public string Name { get; set; } } 我們希望將 User 物件的值 mapping 到 UserInfo 物件上，只保留 Id 和 Name 屬性的值，這樣可以得到一個新的 UserInfo 物件。</description></item><item><title>C# Delegate 簡介</title><link>https://caseyho.dev/post/2023-03-20-c-sharp-delegate-intro/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2023-03-20-c-sharp-delegate-intro/</guid><description>定義 代表 Function 的 pointer。當一個方法被 assign 給 delegate 時，就可以通過這個 delegate 來用 function。
範例 創建 delegate 1 delegate int Calculate(int x, int y); Assign delegate 1 Calculate calc = Add; 使用 delegate 1 int result = calc(5, 10); 為什麼不直接呼叫 function 而是使用 delegate 的方式? 使用 delegate 可以幫助提高 code 的靈活性和 reusability。
範例 - 使用 delegate 當 User click 一個 button 時，會顯示 feedback message，這個範例就可以使用 delegate 完成。
這裡使用了 EventHandler delegate，它是一個系統提供的 delegate，可以表示具有兩個參數的方法，第一個參數是從哪邊觸發，第二個參數是 EventArgs 類型的事件參數。
然後，定義 OnClick function，它將在 User click button 被調用：</description></item><item><title>NVARCHAR(9) v.s. VARCHAR(9) IN MSSQL</title><link>https://caseyho.dev/post/2023-02-04-nvarchar-9-what-does-it-mean/</link><pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2023-02-04-nvarchar-9-what-does-it-mean/</guid><description>NVARCHAR(9) 在 MSSQL 中， NVARCHAR(9) 的 9 代表的是在這一個 COLUMN 中，可以最多放 9 個字元，若未滿 9 個字元，則會補到 9 個字元，欄位長度是固定的。
以英文和中文，可以是 abcdefghi，或是 aaaaccccd，一二三日禮拜拜日日&amp;hellip;等最多擺放 9 個字元。
1 2 3 4 5 6 7 8 DROP TABLE IF EXISTS TEST CREATE TABLE TEST ( TEST1 NVARCHAR(9), TEST2 VARCHAR(9) ) INSERT INTO TEST VALUES(N&amp;#39;一二三日禮拜拜日日&amp;#39;, &amp;#39;&amp;#39;) INSERT INTO TEST VALUES(N&amp;#39;123456789&amp;#39;, &amp;#39;&amp;#39;) 如果輸入大於 9 個字元，會出現以下錯誤訊息
儲存空間 nvarchar(n)：(2 * n + 2) bytes
不管是英文或中文，每一個字元都以 2 個 bytes 做計算，NVARCHAR(9) 表示儲存空間為 18 bytes + 2 byes，其中 2 bytes 為地址位置。</description></item><item><title>找不到 bin\roslyn\csc.exe 檔案</title><link>https://caseyho.dev/post/2023-02-04-can-not-find-roslyn-csc-exe-file/</link><pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2023-02-04-can-not-find-roslyn-csc-exe-file/</guid><description>錯誤訊息 找不到路徑 &amp;lsquo;D:\xxx\bin\roslyn\csc.exe&amp;rsquo; 的一部分。
解決方法 找到 packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.2.0.0
進入 tools
進入 Roslyn45
貼到專案的 Bin folder，並重新命名為 roslyn
再重啟專案，即可成功
參考資料 神祕的 ASP.NET bin\roslyn 目錄
[沒有蠢問題] 找不到路徑 bin\roslyn\csc.exe</description></item><item><title>在SSMS上刪除SQL Server Agent 失敗</title><link>https://caseyho.dev/post/2023-01-16-fail-to-delete-sql-server-agenet/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2023-01-16-fail-to-delete-sql-server-agenet/</guid><description>錯誤訊息 作業 &amp;lsquo;TEST.Subplan_1&amp;rsquo; 的 卸除 失敗。 (Microsoft.SqlServer.Smo) DELETE 陳述式與 REFERENCE 條件約束 &amp;ldquo;FK_subplan_job_id&amp;rdquo; 衝突。衝突發生在資料庫 &amp;ldquo;msdb&amp;rdquo;，資料表 &amp;ldquo;dbo.sysmaintplan_subplans&amp;rdquo;, column &amp;lsquo;job_id&amp;rsquo;。 陳述式已經結束。 (Microsoft SQL Server, 錯誤: 547)
解決方法 先找出要被刪除的 id 1 SELECT name, id FROM msdb.dbo.sysmaintplan_plans 再依序執行以下 SQL 1 2 3 DELETE FROM msdb.dbo.sysmaintplan_log WHERE plan_id = DELETE FROM msdb.dbo.sysmaintplan_subplans WHERE plan_id = DELETE FROM msdb.dbo.sysmaintplan_plans WHERE id = 再回到 SSMS 透過 UI 刪除該排程即可成功 參考資料 SQL Server - cannot drop idle job</description></item><item><title>使用 Selenium 和手打驗證碼登入網頁</title><link>https://caseyho.dev/post/2023-01-03-auto-login-using-selenium/</link><pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2023-01-03-auto-login-using-selenium/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 from selenium import webdriver from selenium.webdriver.chrome.options import Options import time chrome_options = Options() chrome_options.add_experimental_option(&amp;#34;detach&amp;#34;, True) driver = webdriver.Chrome(options=chrome_options) # 開啟登入網頁 driver.get(&amp;#39;login page url&amp;#39;) # Account input_acct_box = driver.find_element(&amp;#39;xpath&amp;#39;, &amp;#39;//*[@id=&amp;#34;Acct&amp;#34;]&amp;#39;) input_acct_box.send_keys(&amp;#39;&amp;#39;) # password input_pwd_box = driver.</description></item><item><title>執行 selenium 出包，此版本的 %1 與您執行的 Windows 版本不相容</title><link>https://caseyho.dev/post/2022-12-15-windows-not-compatible/</link><pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-12-15-windows-not-compatible/</guid><description>錯誤訊息 OSError: [WinError 216] 此版本的 %1 與您執行的 Windows 版本不相容。請檢查電腦的系統資訊，然後連絡軟體發行者。 The version of %1 is not compatible with the version of Windows you&amp;rsquo;re running.
解決方法 通常是 x86 和 x64 位元的衝突，不過這邊指的是 Driver 和電腦的安裝版版本不一致，需下載一樣的版本。
以 Google Chrome 為例：
可以看到我的 Chrome 是安裝 108.0.5359.125
Driver 也需要下載相同的版本
將下載好的 Driver 放在跟 python.exe 同一個資料夾
可以執行 Sample Code 看能不能成功
1 2 3 4 5 6 7 8 9 10 11 12 13 from selenium import webdriver from selenium.webdriver.chrome.options import Options #使用chrome的webdriver chrome_options = Options() chrome_options.</description></item><item><title>No valid Oracle clients found. You need at least one 64-bit client properly configured. | Toad for Oracle</title><link>https://caseyho.dev/post/2022-11-22-no-valid-oracle-clients-found-toad-for-oracle/</link><pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-11-22-no-valid-oracle-clients-found-toad-for-oracle/</guid><description>錯誤訊息 No valid Oracle clients found. You need at least one 64-bit client properly configured.
錯誤原因 因為我安裝的 Toad 為 64 bit，但是 Oracle Instant Client 為 32 bit，所以需要另外再下載 64 bit 的 Oracle Instant Client。
可以從 Help &amp;gt; About 查看 Toad 目前使用 x86 還是 x64
如果之前有安裝過 sqlplus，可以執行 sqlplus.exe 並打開工作管理員之後查看 Oracle Instant Client 的版本
解決步驟 到 Oracle 官網下載 Oracle Instant Client Downloads，需要注意位元，如果 Toad 安裝 32 bit的版本 ，Oracle Instant Client 也需要安裝 32 bit，如果 Toad 安裝 64 bit的版本 ，Oracle Instant Client 也需要安裝 64 bit。 這一步很重要，因為容易踩雷!</description></item><item><title>將多筆資料合併為一筆顯示 - FOR XML PATH | SQL</title><link>https://caseyho.dev/post/2022-11-21-merge-column-data-to-a-cell/</link><pubDate>Mon, 21 Nov 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-11-21-merge-column-data-to-a-cell/</guid><description>前情提要 本篇使用 AdventureWorks2016 資料庫，將每一個產品的利用 FOR XML PATH 將評論人顯示多筆資料。
步驟 先找出要使用合併的資料 (通常在 detail page)，先鎖定 ProductID = 937，較容易寫出完整 query 1 2 3 4 SELECT &amp;#39;,&amp;#39; + [Production].[ProductReview].ReviewerName FROM [Production].[ProductReview] WHERE ProductID = 937 FOR XML PATH(&amp;#39;&amp;#39;) 可以看到評論 ProductId = 937 的人有 David 和 Jill
在每一個產品中，顯示各個產品的評論的人並使用 FOR XML PATH 顯示 將 WHERE ProductID = 937 拿掉 加入 [Production].[ProductReview].ProductID = [Product].ProductID 和 FROM [Production].[Product] 1 2 3 4 5 6 7 8 SELECT ProductID, ( SELECT &amp;#39;,&amp;#39; + [Production].</description></item><item><title>如何壓縮 Transaction Log 檔案 | SQL</title><link>https://caseyho.dev/post/2022-11-11-how-to-compress-transaction-logs/</link><pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-11-11-how-to-compress-transaction-logs/</guid><description>方法 有 2 種方法
使用 SSMS 使用 TSQL TSQL 在資料庫按右鍵 &amp;gt; 屬性 &amp;gt; 復原模式
如果 DB 的復原模式使用「簡單」，直接使用 DBCC SHRINK 指令即可。
1 2 3 4 5 -- 找出 log 檔案名稱 SELECT name FROM sys.master_files WHERE type_desc = &amp;#39;LOG&amp;#39; -- AdventureWorks2012_log為壓縮的檔名 -- 1 為 AdventureWorks2012_log 壓縮到剩 1 MB DBCC SHRINKFILE (AdventureWorks2012_log, 1) 如果 DB 的復原模式使用「完整」，可以將復原模式從完整變成「簡單」後再壓縮檔案，壓縮檔案結束後再將復原模式調回完整。
1 2 3 4 5 6 7 8 9 10 -- 將復原模式變成「簡單」 ALTER DATABASE AdventureWorks2012 SET RECOVERY SIMPLE GO -- 壓縮檔案 DBCC SHRINKFILE (AdventureWorks2012_log, 1) GO -- 將復原模式變成「完整」 ALTER DATABASE AdventureWorks2012 SET RECOVERY FULL SSMS 資料庫按右鍵 &amp;gt; 工作(Tasks) &amp;gt; 壓縮(Shrink) &amp;gt; 檔案(Files) 檔案類型選擇紀錄檔 (log)，並選擇要壓縮的 log 檔的位置，壓縮動作可以自行選擇。 按下確定即可壓縮 log 檔 TSQL 1 2 3 4 5 6 7 8 USE [master]; GO -- 要備份的資料庫名稱 BACKUP DATABASE [SQLTestDB] TO DISK = N&amp;#39;Z:\SQLServerBackups\AdvWorksData.</description></item><item><title>The DELETE statement conflicted with the REFERENCE constraint "FK_subplan_job_id" | SQL</title><link>https://caseyho.dev/post/2022-11-10-the-delete-statemet-conflicted/</link><pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-11-10-the-delete-statemet-conflicted/</guid><description>錯誤訊息 &amp;ldquo;子計劃 缷除失敗&amp;rdquo;
delete 陳述式與reference 條件的約束&amp;rsquo;FK_subplan_job_id&amp;rsquo;衝突。衝突發生在資料庫
&amp;ldquo;msdb&amp;rdquo;,資料表 &amp;ldquo;dbo.sysmaintplan_subplans&amp;rdquo;,colum &amp;ldquo;job_id&amp;rdquo;。
英文版：
TITLE: Microsoft SQL Server Management Studio &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; Drop failed for Job &amp;lsquo;manual_db_backups.Subplan_1&amp;rsquo;. (Microsoft.SqlServer.Smo) For help, click: http://go.microsoft.com/fwlink?ProdName=Microsoft+SQL+Server&amp;amp;ProdVer=9.00.3042.00&amp;amp;EvtSrc=Microsoft.SqlServer.Management.Smo.ExceptionTemplates.FailedOperationExceptionText&amp;amp;EvtID=Drop+Job&amp;amp;LinkId=20476 &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; ADDITIONAL INFORMATION: An exception occurred while executing a Transact-SQL statement or batch. (Microsoft.SqlServer.ConnectionInfo) &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; The DELETE statement conflicted with the REFERENCE constraint &amp;ldquo;FK_subplan_job_id&amp;rdquo;. The conflict occurred in database &amp;ldquo;msdb&amp;rdquo;, table &amp;ldquo;dbo.sysmaintplan_subplans&amp;rdquo;, column &amp;lsquo;job_id&amp;rsquo;. The statement has been terminated. (Microsoft SQL Server, Error: 547) For help, click: http://go.</description></item><item><title>縮小 SSIS DB 檔案大小 | SSIS</title><link>https://caseyho.dev/post/2022-11-07-shrink-ssis-db-files/</link><pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-11-07-shrink-ssis-db-files/</guid><description>將週期天數從預設的 365 天改到 30 天或其他更小的數字。 將 delete_batch_size 設定為 1000，預設為 10。
1 Alter procedure SSISDB.[internal].[cleanup_server_retention_window] SET @delete_batch_size = 1000 把以下 4 張 Table 做 Page 壓縮 1 2 3 4 5 6 7 8 USE [SSISDB] ALTER TABLE [internal].[event_messages] REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = PAGE) ALTER TABLE [internal].[operation_messages] REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = PAGE) ALTER TABLE [internal].[execution_component_phases] REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = PAGE) ALTER TABLE [internal].</description></item><item><title>Dynamic Type 介紹 | c#</title><link>https://caseyho.dev/post/2022-10-24-dynamic-type-in-c-sharp/</link><pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-24-dynamic-type-in-c-sharp/</guid><description>前情提要 在 C# 4.0，有一個新的 Type 叫做 Dynamic Type。
Dynamic Type 不會在 compile time 做 checking，而是在 runtime 的時候編譯器才會知道該變數的 type ，並在 runtime 做 checking。
須注意事項 在大多數的時候，可以把 dynamic type 視為 object。 如果想要知道該變數在 runtime 的 type，可以使用 GetType()。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 using System; public class Program { public static void Main() { dynamic a = &amp;#34;this is a string&amp;#34;; dynamic b = 123234; Console.</description></item><item><title>檢查 date 是否為 null | c#</title><link>https://caseyho.dev/post/2022-10-24-check-date-is-null-date/</link><pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-24-check-date-is-null-date/</guid><description>Snippet 1 2 3 4 if (!datetime.HasValue) { //unassigned } 參考資料 [Checking to see if a DateTime variable has had a value assigned</description></item><item><title>The contextual keyword 'var' may only appear within a local variable declaration. | c#</title><link>https://caseyho.dev/post/2022-10-21-the-contextual-keyword-var-may-only-appear-within-a-local-variable-declaration/</link><pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-21-the-contextual-keyword-var-may-only-appear-within-a-local-variable-declaration/</guid><description>錯誤訊息 The contextual keyword &amp;lsquo;var&amp;rsquo; may only appear within a local variable declaration.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 using System; using System.Collections.Generic; using System.Web; using System.Text; using WebMatrix.Data; /// &amp;lt;summary&amp;gt; /// Summary description for ClassName /// &amp;lt;/summary&amp;gt; public class Base { public void CalculateTotalPriceInCart(var PartNumber, var Description, var OrderId, bool IsBoxed) { var database = Database.</description></item><item><title>保留原本 C# 的 Exception message，並加上客製化 Exception Message | c#</title><link>https://caseyho.dev/post/2022-10-19-add-a-message-to-an-exception-without-losing-any-information-in-c-sharp/</link><pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-19-add-a-message-to-an-exception-without-losing-any-information-in-c-sharp/</guid><description>假設現在程式拋出了一個 Exception，那麼我們看到的訊息應該會是 C# 預設寫好的錯誤訊息，但同時我們希望使用者需要知道這一個錯誤訊息，開發者應該可以將預設寫好的錯誤訊息變成使用者看得懂的東西。此時可以使用 Exception 的 Data 屬性。
Data 屬於 key/value pair，可以傳入自己想要的 key 和 value，可以使用以下 Exception.Data[key] 取到 Value。
範例 1 2 3 4 5 catch (Exception ex) { ex.Data.Add(&amp;#34;UserMessage&amp;#34;, &amp;#34;An error occurred while trying to load the XSLT file.&amp;#34;); throw; } 1 2 3 4 5 6 7 8 9 10 11 catch (Exception ex) { if (ex.Data.Contains(&amp;#34;UserMessage&amp;#34;)) { MessageBox.Show(ex.Data[&amp;#34;UserMessage&amp;#34;].ToString()); } else { MessageBox.Show(ex.Message); } } 參考資料 How can I add a message to an exception without losing any information in C#?</description></item><item><title>CSS positioning 介紹 | css</title><link>https://caseyho.dev/post/2022-10-17-intro-to-css-positioning/</link><pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-17-intro-to-css-positioning/</guid><description>介紹 position 屬性用於 HTML 元素的定位方法，再搭配使用 top、bottom、left 和 right 屬性定位。
但是，除非首先設置了 position 屬性，否則 top、bottom、left 和 right 屬性將不起作用。
以下為 position 屬性值：
position: static position: relative position: fixed position: absolute position: sticky Static Positioning position: static 是 HTML 元素的預設值。
任何套用 position: static; 的元素「不會被特別定位」在頁面上特定位置，而是照著瀏覽器預設的設定自動排版在頁面上。
position: static; 的元素不受 top 、 right 、 bottom 和 left 屬性影響。
範例 CodePen
可以看到加上了 position: static;之後，元素依然在相同的位置。
Relative Positioning position: relative; 的元素和 position: static的元素 十分類似，position: relative;的元素可以讓開發者修改元素的最終位置。
position: relative; 的元素必須加上top 、 right 、 bottom 和 left 屬性，才能修改元素的最終位置，使元素相對於原本元素該出現的位置進行定位。</description></item><item><title>Hover div 的時候放大圖片 | css</title><link>https://caseyho.dev/post/2022-10-18-zoom-a-div-with-hover/</link><pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-18-zoom-a-div-with-hover/</guid><description>預設結果 此為我們要做的結果圖。
background-position background-position 用來設定背景圖片位置，如果只指定 x 軸位置，y 軸位置必定為 center。
1 background-position: x軸位置 y軸位置; 1 2 3 4 5 6 /* 靠左靠下對齊 */ background-position:left bottom;　/* 離左邊 30px，離上方 60px 的位置 */ background-position:30px 60px;　/* 離左邊 10%，離上方 50% 的位置 */ background-position:10% 50%;　CodePen 範例 CodePen
1 2 3 4 5 6 &amp;lt;div class=&amp;#34;wrapper&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;frame&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;frame&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;frame&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;frame&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 .</description></item><item><title>flex-shrink 屬性介紹 | css</title><link>https://caseyho.dev/post/2022-10-16-intro-to-flex-shrink/</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-16-intro-to-flex-shrink/</guid><description>介紹 flex-shrink 只適用於 flex item 上。
當使用 flex-shrink 時，如果 flex container 的長寬太小，設定 flex shrink 可以允許 flex item 縮小。 當 flex container 的寬度小於其中所有 flex item 的相加起來的寬度時，flex item 就會縮小。
flex-shrink 的屬性值為數字。數字越大，flex item 會縮小得越多。
例如有一個 flex item 的 flex-shrink: 1，而另一個 flex item 的 flex-shrnk: 3，則 flex-shrink: 3的 flex item 將縮小原本自己寬度四分之三， flex-shrink: 1 的 flex item 將縮小原本自己寬度四分之三。
flex-shrink 定義空間不夠時各個元素如何收縮。flex-shrink: 1 為預設值。
範例 CodePen
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 html { box-sizing: border-box; } .</description></item><item><title>PO - 採購單 | ORACLE ERP R12</title><link>https://caseyho.dev/post/2022-10-11-oracle-erp-ebs-r12-po-intro/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-11-oracle-erp-ebs-r12-po-intro/</guid><description>ORACLE 官方文件
PO_HEADERS_ALL 說明 採購訂單單頭 ，記錄向哪個供應商買東西。
主要資料 Columns 中文 AGENT_ID 採購員 SEGMENT1 採購單編號 PO_HEADER_ID 採購單 ID VENDOR_ID 供應商 ID VENDOR_SITE_ID 供應商地點 ID TERMS_ID 付款條件 TYPE_LOOKUP_CODE 採購單類型 主要相關 TABLE TABLE Data PO_AGENTS / PO_AGENTS_V 採購員 PO_VENDORS/ PO_VENDOR_SITES_ALL 供應商/供應商地點 AP_TERMS_TL 付款條件 PO_LINES_ALL 說明 採購訂單明細表 ，記錄向這個供應商買哪些東西，例如 item1，item2。
FOREIGN KEY PO_LINES_ALL.PO_HEADER_ID = PO_HEADERS_ALL.PO_HEADER_ID PO_LINE_LOCATIONS_ALL 說明 同一採購訂單行的品項可能會送去不同的地點，此表記錄物料送貨情況：
送貨到自己公司的兩個不同的收貨地點，如分別在台北和新竹收貨。
或者是同一收貨地點，但是兩個不同的送貨時間，如在新竹收貨，一批在 7 月收貨，一批在 8 月收貨。
表中還會記錄到收料、退料、開發票的數量情況。
FOREIGN KEY PO_LINE_LOCATIONS_ALL.PO_LINE_ID = PO_LINES_ALL.PO_LINE_ID PO_DISTRIBUTIONS_ALL 說明 分配的不同使得需要對應到不同的費用會計科目，或者費用需由不同的部門來承擔，則可在分配行中操作。 FOREIGN KEY PO_DISTRIBUTIONS_ALL.LINE_LOCATION_ID = PO_LINE_LOCATIONS_ALL.</description></item><item><title>如何讓 flex item 等高? | css</title><link>https://caseyho.dev/post/2022-10-09-an-equal-height-div-using-flexbox/</link><pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-09-an-equal-height-div-using-flexbox/</guid><description>CodePen 完成圖
步驟 Step 1 先畫出理想的 HTML Mark up，簡單來講分成 3 層，最外層紅色的 .container，橘色的 .card，和螢光綠的 .card__header，.card__body 和 .card__footer。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;card&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;card__header&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;https://source.</description></item><item><title>如何讓 image 塞進一個 div 裡面並維持解析度? | css</title><link>https://caseyho.dev/post/2022-10-03-how-to-remain-image-aspect-ratio-in-a-div/</link><pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-03-how-to-remain-image-aspect-ratio-in-a-div/</guid><description>範例 CodePen 範例
1 2 3 4 5 6 &amp;lt;div class=&amp;#34;img-wrap&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;https://images.unsplash.com/photo-1615147342761-9238e15d8b96?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1001&amp;amp;q=80&amp;#34; alt=&amp;#34;&amp;#34; /&amp;gt; &amp;lt;/div&amp;gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 body { display: flex; justify-content: center; align-items: center; width: 100vw; height: 100vh; margin: 0; padding: 0; } .img-wrap { border: 1px solid green; width: 50%; height: 50%; } .img-wrap img { width: 100%; height: 100%; object-fit: contain; } 解說 先設定圖片的容器的 width 和 height</description></item><item><title>SSIS ValidateExternalMetaData | SSIS</title><link>https://caseyho.dev/post/2022-09-30-ssis-validatemeta-data-attribute-intro/</link><pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-09-30-ssis-validatemeta-data-attribute-intro/</guid><description>說明 從打開封裝，拉 component，到執行封裝，這一段的過程都要驗證資料是否正確。
此圖為官方版說明。
如果 ValidateExternalMetadata = True，在設計封裝的時候， SSIS 就會連到外面的資料庫來比對資料正不正確，所以就會有紅色的 X。
設定 ValidateExternalMetadata = False，在設計封裝的時候， SSIS 就不會比對外部的資料正不正確，直到執行這一個 OLEDB 的時候才會驗證資料。</description></item><item><title>Clustered Index &amp; Non-Clustered Index | sql</title><link>https://caseyho.dev/post/2022-09-29-clustered-index-and-nonclustered-index-intro/</link><pubDate>Thu, 29 Sep 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-09-29-clustered-index-and-nonclustered-index-intro/</guid><description>INDEX 主要以下的特點：
Index 加快從 Table 或 View 中拿到資料的速度 Index 的值可以為一個或是多個值，這一些值會從 Table 或是 View 來的 Index 會存在一個資料結構叫做 B-tree 中 Index 可以分成 2 種：
CLUSTERED INDEX (叢集索引) NON-CLUSTERED INDEX (非叢集索引) CLUSTERED INDEX (叢集索引) Clustered Index 可以將 View 或是 Table 中的資料依照 Index 的 Value 排序後儲存 因為資料本身只能以一種順序排序，所以每個 Table 只能有一個 Clustered Index 只有當 Table 包含 Clustered Index 時，Table 中的資料才會以排序順序儲存 Table 有 Clustered Index 時，Table 又稱為 Clustered Table (叢集資料表) 如果 Table 沒有任何 Clustered Index，它的資料就儲存在未排序的資料結構中，這個資料結構稱為 Heap (堆積)。 Non-clustered Index (非叢集索引) Non-clustered Index 包含 Non-clustered Index Value (非叢集索引鍵值)， Non-clustered Index Value 可以是一個或是多個，為 Table 中的欄位。而每個 Non-clustered Index Value 都有一個 Pointer，指向包含 Non-clustered Index Value 的資料，也就是 Table 裡的欄位資料。 Non-clustered Index Value 的 Pointer 稱為 Row Locator (資料列定位器)。Row Locator 的資料結構須要看資料儲存是在 Heap 或 Clustered Table 而定。若是 Heap，Row Locator 是指向 Pointer。 若是 Clustered Table，Row Locator 就是 Clustered Index。 共通點 每當修改 Table 的資料時，就會自動維護資料表或檢視的索引。 Clustered Index 與 Non-clustered Index 都可以是 Unique 或是不是 Unique，Unique 表示資料值不能重複，不是 Unique 表示資料值可以重複。 Query Optimizer 如何使用 Index 建立好的 Index 可以降低磁碟 I/O 作業並耗用較少的系統資源，因此可改善查詢效能。 當執行 SELECT、UPDATE、DELETE 或 MERGE 時， Query Optimizer 會評估每個擷取資料的可用方法。 擷取資料的可用方法可以分成 2 種 Table Scan 掃描一個或是多個 Index Table Scan (資料表掃描) 當執行 Table Scan 時，Query Optimizer 可以讀取 Table 中的所有資料，並擷取符合查詢條件的資料列。 Table Scan 將產生許多磁碟 I/O 作業，而且可能需要大量資源。 使用 Index 掃描 當 Query Optimizer 使用 Index 掃描時，它會搜尋 Index Value 、尋找查詢所需的資料之儲存位置，並從該位置擷取符合的資料。 一般而言，搜尋 Index 會比搜尋 Table 更快。 參考資料 Clustered and Non-clustered indexes described</description></item><item><title>MSSQL Update Query | SQL</title><link>https://caseyho.dev/post/2022-09-27-mssql-update-query/</link><pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-09-27-mssql-update-query/</guid><description>不知道為什麼，每一次只要有 FROM 或是 INNER JOIN 在 UPDATE 裡面都會忘記怎麼寫，大概是寫的不夠多吧，特別筆記一下。
1 2 3 4 5 6 UPDATE A SET A.X = B.X FROM A INNER JOIN B ON A.ID = B.ID</description></item><item><title>使用 OPENQUERY 新增 Temp Table | SQL</title><link>https://caseyho.dev/post/2022-09-27-create-a-temp-table-with-openquery/</link><pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-09-27-create-a-temp-table-with-openquery/</guid><description>因為 CTE 無法使用 2 個以上的 QUERIES，所以使用 TEMP TABLE 代替 CTE。也因為資料量較大(有 20 多萬筆)，所以我選擇 TEMP TABLE，而不是 TABLE VARIABLE。
刪除 TEMP TABLE 將 SUB QUERY 的資料使用 SELECT &amp;hellip; INTO 加到 TEMP TABLE SELECT &amp;hellip; INTO 會 CREATE 一個 TEMP TABLE 並將資料 INSERT 到 TEMP TABLE 中
TEMP TABLE 的資料來源可以是別的 DATA SOURCE。例如：ORACLE
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 DROP TABLE IF EXISTS #TEMP_TABLE; SELECT INSERTED.</description></item><item><title>使用 SSIS 的 RetainSameConnection 屬性 | SSIS</title><link>https://caseyho.dev/post/2022-09-28-ssis-remainsameconnection-intro/</link><pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-09-28-ssis-remainsameconnection-intro/</guid><description>RetainSameConnection 的預設值為 False，為什麼? 當RetainSameConnection=false，SSIS 的每個工作在開始使用和資料庫連線時才會打開連線，在工作結束時，關閉連線。
因此每個工作都會打開和關閉連線，且每個工作所使用的連線都是不同的。
以上面的圖片，執行 SQL 工作和資料流程工作的連線就會不是同一條，即便他們都是連到同一個資料庫。
當初的用意應該是如果執行 SQL 工作和資料流程工作用的是不同的資料庫連線，例如執行 SQL 工作連到的是 ORACLE DB，資料流程工作連到的是 SQL SERVER，當執行完執行 SQL 工作完成時，資料流程工作其實用不到 ORACLE 的連線，所以就會在完成執行 SQL 工作結束時關閉連線。
這也是合理的，因為有一些工作流程可能是打開檔案，發送信件，那麼打開檔案，發送信件這一些工作就不需要資料庫的連線，因此也不會浪費資源。
Temp Table 當RetainSameConnection=true，表示只要一執行封裝，連線就會打開，直到整個封裝執行結束。以剛剛的圖做舉例，如果我們在執行 SQL工作裡面新增一個 Temp Table，那麼資料流程工作也可以存取這一個 Temp Table，因為執行 SQL工作和資料流程工作連線是一樣的，資源還沒有被釋放掉，Temp Table 還會存在 DB 裡面。
但是如果RetainSameConnection=false，表示每一個的工作連線都是獨立的，如果在執行 SQL工作新增 Temp Table，資料流程工作就不會存取到這一個 Temp Table，因為 Temp Table 早就因為執行 SQL工作結束跟著一起被連線釋放掉。
參考資料 What is the RetainSameConnection Property of OLEDB Connection in SSIS?
使用 Connetion 的屬性 RetainSameConnection</description></item><item><title>web.config 無法存檔，跳出另存新檔視窗 | c#</title><link>https://caseyho.dev/post/2022-09-22-webconfig-cant-save/</link><pubDate>Thu, 22 Sep 2022 23:00:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-09-22-webconfig-cant-save/</guid><description>問題：
當 web.config 需要存檔時，會跳出另存新檔的視窗，且再存檔時，會跳出「由於另一個處理序正在使用檔案」。
解決方案：
開啟工作管理員， 將 Microsoft.VisualStudio.Web.Host.exe 結束工作即可。</description></item><item><title>未設定所要求 URL 的預設文件，且未在伺服器上啟用瀏覽目錄 | c#</title><link>https://caseyho.dev/post/2022-09-22-enable-directory-browsing-by-default-on-iis-express/</link><pubDate>Thu, 22 Sep 2022 23:00:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-09-22-enable-directory-browsing-by-default-on-iis-express/</guid><description>問題：
未設定所要求 URL 的預設文件，且未在伺服器上啟用瀏覽目錄。
解決方法：
其實下面有提示解決方法，「確認網站或應用程序配置文件中的 configuration/system.webServer/directoryBrowse@enabled 屬性已設置為 true。」
實際的運作：
在專案中打開 web.config 檔案 將&amp;lt;system.webServer&amp;gt;加入 web.config 並將以下 2 個 tag 寫入&amp;lt;system.webServer&amp;gt;裡面 &amp;lt;directoryBrowse enabled=&amp;quot;true&amp;quot; /&amp;gt;
&amp;lt;modules runAllManagedModulesForAllRequests=&amp;quot;true&amp;quot; /&amp;gt;
更正後的 web.config 大概會長這樣：
&amp;lt;configuration&amp;gt; &amp;lt;system.webServer&amp;gt; &amp;lt;directoryBrowse enabled=&amp;#34;true&amp;#34; /&amp;gt; &amp;lt;modules runAllManagedModulesForAllRequests=&amp;#34;true&amp;#34; /&amp;gt; &amp;lt;/system.webServer&amp;gt; &amp;lt;/configuration&amp;gt; 參考資料：
How to enable Directory browsing by default on IIS Express</description></item><item><title>String values are immutable | JavaScript</title><link>https://caseyho.dev/post/2022-09-04-string-immutable/</link><pubDate>Sun, 04 Sep 2022 23:12:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-09-04-string-immutable/</guid><description>在 JS 的世界裡面，string 是 immutable，表示 string 裡面的內容物是不可以變動的。 這是什麼意思，我們看以下的例子就知道。
範例 今天我們想要讓 string 這一個字串從 Jesse 變成 Aesse 該怎麼做?
以下步驟：
先設定一個變數叫做 student 將 student assign 給 Jesse 再將 student 的第 0 號位置變成 A 1 2 3 4 5 6 7 // 先設定一個變數叫做 student 並且 value 設為 Jesse let student = &amp;#34;Jesse&amp;#34;; console.log(student); // 將第 0 號位置重新assign，從 J 變成 A student[0] = &amp;#34;A&amp;#34;; console.log(student); 看到這心想應該是沒什麼問題吧，結果拿到 console 一跑，會發現 student 怎麼還是 Jesse?
會發生這種事情，是因為 string 有 immutabllity，裡面的任何字元都不可以變動。所以使用 student[0] assign 是行不通的。</description></item><item><title>var vs let - Part 1 | JavaScript</title><link>https://caseyho.dev/post/2022-09-01-var-let-differeneces/</link><pubDate>Thu, 01 Sep 2022 16:20:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-09-01-var-let-differeneces/</guid><description>自從 JS 在 2015 年推出大改版後，相信大家都看過非常多 var，let，const 的文章，雖然現已 2022，但有許多 legacy project 還是使用 var 來定義變數，就讓我們再了解一次 var 和 let 有何不同吧。
結論： 用 var 定義的變數可以輕易的被重新賦值，但是 let 不行。
1 2 3 var student = &amp;#34;Jesse&amp;#34;; var student = &amp;#34;Tracy&amp;#34;; console.log(student); 這一段程式碼，表示一開始 student 這一個變數是 assign 給 Jesse，但是下一行又將 student 變數 assign Tracy，console.log 出來的結果並沒有 error，是 log Tracy。
雖然這樣 assign 很方便，但是也增加 debug 的困難度，因為如果是大型專案，在寫得時候如果沒有注意到前面有使用，就容易將 variable 重新 assign。
所以 ES6 推出 let + const 希望能取代 var，增加 debug 的效率。
我們來看看如果使用 let 在 console 上，會發生什麼事?</description></item><item><title>Disabled Input 傳至 Controller | JavaScript</title><link>https://caseyho.dev/post/2022-08-31-pass-disabled-input-to-controller/</link><pubDate>Wed, 31 Aug 2022 11:00:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-08-31-pass-disabled-input-to-controller/</guid><description>disabled input 是無法將 value 傳至 controller，但是我們仍需要用到 value，此時需要怎麼做?
解決辦法：
將 disabled input 塞進一個 id 或是 class。
在 submit form 的時候，使用 jQuery 的 removeAttr method，將 disabed 這一個屬性拿掉，這樣就可以在 controller 拿到 value 囉。
以下為 pseudo code，請參考。
1 @Html.CheckBoxFor(m =&amp;gt; m.isUsed, new { @disabled=&amp;#34;disabled&amp;#34;, @class=&amp;#34;disabledCheckbox&amp;#34;} ) 1 2 3 $(&amp;#34;#TestForm&amp;#34;).submit(function () { $(&amp;#34;#CheckBoxId&amp;#34;).removeAttr(&amp;#34;disabled&amp;#34;); }); 參考資料： How do I submit disabled input in ASP.NET MVC?</description></item><item><title>點擊 Enter 之後，執行某一支 Function | Vue.js</title><link>https://caseyho.dev/post/2022-08-29-use-enter-to-trigger-function-vue-js/</link><pubDate>Wed, 31 Aug 2022 11:00:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-08-29-use-enter-to-trigger-function-vue-js/</guid><description>JSFiddle 範例
使用 v-on:keyup.enter='function name' 綁定 input 或是 form。
起初寫的時候，以為 v-on:keyup.enter 要綁在 button 上，但是實際上其實是 form (或是其他的 input)， 以 form 為主體， trigger Enter 鍵之後，呼叫 login function，即可執行成功。
1 2 3 4 5 6 7 &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;form v-on:keyup.enter=&amp;#34;login&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; /&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; /&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; @click=&amp;#34;login&amp;#34;&amp;gt;Login&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/div&amp;gt; 1 2 3 4 5 6 7 8 new Vue({ el: &amp;#34;#app&amp;#34;, methods: { login() { alert(&amp;#34;CLICKED!&amp;#34;); }, }, }); 參考資料: On key press of Enter, click a button in vuejs</description></item><item><title>確認 input string 是否為數字 | JavaScript</title><link>https://caseyho.dev/post/2022-08-29-is-input-string-numeric/</link><pubDate>Mon, 29 Aug 2022 23:11:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-08-29-is-input-string-numeric/</guid><description>從 string data type 轉成 int 中間出的變化會非常多，有可能 input string 是空字串， input string 也有可能是 backctick&amp;hellip;等，一堆很奇怪的符號，這邊我使用我自己在專案中有使用的，並不保證大家都能夠判斷正確。
parseFloat(input string)
檢查是否為 NaN
如果是，則不是 Numeric Value
反之，則是 Numeric Value
1 2 3 4 5 6 7 function isNumeric(str) { if (typeof str != &amp;#34;string&amp;#34;) return false; // we only process strings! return ( !isNaN(str) &amp;amp;&amp;amp; // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)... !isNaN(parseFloat(str)) ); // .</description></item><item><title>設置 Git SSH key - Windows11 版本 | Git</title><link>https://caseyho.dev/post/2022-08-27-setup-ssh-key-win11/</link><pubDate>Sat, 27 Aug 2022 23:11:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-08-27-setup-ssh-key-win11/</guid><description>設置步驟 這一篇主要紀錄設定 Github 的 SSH key - Windows 11 版本
安裝 Git ：下載網址 git --version
如果不確定電腦有沒有安裝 Git，可以使用 git --version 確認，如果有，會顯示安裝的版本，如果沒有，請去官網下載，基本上只要一直按下一步即可。
產生 SSH key 為 4 個步驟。
ssh-keygen 按下 Enter - 使用預設路徑，檔案 按下 Enter - 不使用密碼保護私鑰 按下 Enter - 確認上述動作 使用 ssh-keygen 可以產生 SSH key ，接下來會被問到你想要把 SSH key 放在哪一個 file，直接按下 Enter，即是放在預設路徑，檔案。
完成檔案新增後，會要求輸入 passphrase，passphrase 就是密碼，這一個密碼可以用來保護私鑰，雖然設置密碼保護私鑰能多一層的保障，但是每一次執行 Git 時就會被要求輸入密碼，這倒是一大缺點，這裡我不使用密碼。
按下 Enter 後會被要求再輸入一次密碼，如果剛剛沒有設定密碼，直接按 Enter，反之打上剛剛設定的密碼。
如果有看到像是亂碼的東西，表示 SSH Key 已經新增成功，如要看 SSH Key 放在哪一個檔案，可以到 C 槽的使用者底下有一個 .ssh 的資料夾，點開後就會有檔案 (假設使用的是預設路徑)。</description></item><item><title>List&lt;自定義的 class> 轉成以逗號分隔字串 | c#</title><link>https://caseyho.dev/post/2022-08-24-combine-attribute-with-list/</link><pubDate>Wed, 24 Aug 2022 16:14:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-08-24-combine-attribute-with-list/</guid><description>搭配 LINQ 和 string.Join()，將 List&amp;lt;自定義的 class&amp;gt; 轉成以逗號分隔字串。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 void Main() { // 新增一個 User List 叫做 result List&amp;lt;User&amp;gt; result = new List&amp;lt;User&amp;gt;(); // 加入 3 個 object 到 result，分別為 Sharon，John 和 Bobby result.Add(new User(1, &amp;#34;Sharon&amp;#34;, &amp;#34;User&amp;#34;, &amp;#34;sharon&amp;#34;)); result.Add(new User(2, &amp;#34;John&amp;#34;, &amp;#34;User&amp;#34;, &amp;#34;john&amp;#34;)); result.</description></item><item><title>2 陣列中找出至少有一個相同之元素 | JavaScript</title><link>https://caseyho.dev/post/2022-08-24-two-array-comparisions/</link><pubDate>Wed, 24 Aug 2022 14:14:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-08-24-two-array-comparisions/</guid><description>使用 Array.prototype.some() 和 Array.prototype.filter()，找出 2 個 array 至少有一個相同的元素。
some() 接收到的參數是一組公式，如果 array 的某一個元素有符合此公式，立即回傳 true，如遍歷整個 array 都找不到則回傳 false。
filter() 接收到的參數也是一組公式，不過跟 some() 不一樣的地方是 filter() 經過公式的運算後，會回傳一個新的陣列。
範例：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var result1 = [ { id: 1, name: &amp;#34;Sandra&amp;#34;, type: &amp;#34;user&amp;#34;, username: &amp;#34;sandra&amp;#34; }, { id: 2, name: &amp;#34;John&amp;#34;, type: &amp;#34;admin&amp;#34;, username: &amp;#34;johnny2&amp;#34; }, { id: 3, name: &amp;#34;Peter&amp;#34;, type: &amp;#34;user&amp;#34;, username: &amp;#34;pete&amp;#34; }, { id: 4, name: &amp;#34;Bobby&amp;#34;, type: &amp;#34;user&amp;#34;, username: &amp;#34;be_bob&amp;#34; }, ]; var result2 = [ { id: 2, name: &amp;#34;John&amp;#34;, email: &amp;#34;johnny@example.</description></item><item><title>AD 驗證有可能造成資安問題嗎?</title><link>https://caseyho.dev/post/2022-08-19-is-attacking-available-when-using-ad-login-auth/</link><pubDate>Fri, 19 Aug 2022 21:14:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-08-19-is-attacking-available-when-using-ad-login-auth/</guid><description>有一天我被我主管問到這件事，若企業網站使用 AD 驗證方式登入帳密，使用 POST 的方式將未加密的帳密傳至伺服器中，整個過程都是使用內網，有沒有可能會被壞人竊取帳號密碼? (假設沒有惡意主動攻擊的狀況下)
上網查了之後發現，應該是不太可能的，原因如下：
企業網站登入流程如下：
會先啟用 SSL
到入登入頁面
使用者輸入帳密
密碼傳至 API 做驗證
在這過程中帳密皆會以 SSL 加密的方式送出，如果壞人在這中間擷取封包，所拿到的東西也都是加密過後的東西，當然 HTTPS 或是 SSL 並不保證是安全的，所以如果再進一步破解，也是有可能竊取帳密，但並不會這麼容易的讓壞人將密碼看透透。
資安的世界其實很複雜，攻擊的一方一定會站的比較上風，大部分的東西放在網路上其實都不安全，最安全是手寫放在保險箱(哈哈)，但目前企業都在推動數位轉型，很多資料都會放在網路上做彙整，我們只能做最壞的打算，進行最大的防護。
如有不同的想法，歡迎留言討論。
參考資料： HTTPS 的連線夠安全嗎？</description></item><item><title>值違反資料行的完整性條件約束 | SSIS</title><link>https://caseyho.dev/post/2022-07-19-ssis-value-constraint/</link><pubDate>Tue, 19 Jul 2022 09:18:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-07-19-ssis-value-constraint/</guid><description>錯誤訊息：
DataFlow:錯誤: 寫入 Table_A.輸入[OLE DB 目的地輸入] 上的 寫入 Table_A 輸入[OLE DB 目的地輸入].資料行[Column_A] 發生錯誤。傳回的資料行狀態是: &amp;ldquo;值違反資料行的完整性條件約束。&amp;quot;。
解決方法：
Table_A.Column_A 不接受 NULL，但是傳入的資料是 NULL</description></item><item><title>排序後再 SELECT TOP N 筆資料</title><link>https://caseyho.dev/post/2022-07-13-oracle-sql-limit-number-of-rows-after-ordering/</link><pubDate>Wed, 13 Jul 2022 17:56:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-07-13-oracle-sql-limit-number-of-rows-after-ordering/</guid><description>寫法一：
1 2 3 4 5 6 7 SELECT * FROM ( SELECT * FROM TABLE_A ORDER BY TABLE_A.COLUMN_A DESC ) WHERE ROWNUM &amp;lt;= 5; 寫法二：
1 2 3 4 SELECT * FROM TABLE_A ORDER BY TABLE_A.COLUMN_A DESC OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY; 寫法三： (Ask Tom) 速度最快
1 2 3 4 5 6 7 SELECT * FROM ( SELECT a.*, ROWNUM rnum FROM ( SELECT * FROM TABLE_A ORDER BY TABLE_A.</description></item><item><title>定義變數</title><link>https://caseyho.dev/post/2022-07-11-define-variables-oracle-sql/</link><pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-07-11-define-variables-oracle-sql/</guid><description>目的 Oracle SQL 定義變數跟 SQL Server 的用法十分不一樣(踩到非常多坑啊 😭)，所以這一篇主要紀錄 Oracle SQL 定義變數 的 VARIABLE 和 DEFINE。
DEFINE 的 VARIABLE 的差別 DEFINE 的目的是替代變數，在 client 端執行解析，需要加入&amp;amp;在變數名稱前面，且必須要有變數名稱和預設值。不可以指定 data type，唯一的 data type 為 char。
語法：
DEFINE variable_name = value
VARIABLE 的目的是綁定變數，在 server 端執行解析，需要加入:在變數名稱前面，可以綁定多種 data type。
語法：
VARIABLE variable_name data_type
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 -- 先定義 VARIABLE variable_name data_type VARIABLE po_header_ids VARCHAR2(1000); -- 如果需要賦予預設值，必須在 variable_name 前面加入 :，也就是 :variable_name -- := 在 ORACLE SQL 表示 ASSIGN BEGIN :po_header_ids := &amp;#39;1,2,3&amp;#39;; END; / SELECT PHA.</description></item></channel></rss>