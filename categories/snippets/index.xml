<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Snippets on Casey's Blog</title><link>https://caseyho.dev/categories/snippets/</link><description>Recent content in Snippets on Casey's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 29 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://caseyho.dev/categories/snippets/index.xml" rel="self" type="application/rss+xml"/><item><title>簡單 UI Testing Script</title><link>https://caseyho.dev/post/2023-03-29-python-simple-test-selenium/</link><pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2023-03-29-python-simple-test-selenium/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 from selenium import webdriver from selenium.webdriver.chrome.options import Options import time #使用chrome的webdriver chrome_options = Options() chrome_options.add_experimental_option(&amp;#34;detach&amp;#34;, True) driver = webdriver.</description></item><item><title>找不到 bin\roslyn\csc.exe 檔案</title><link>https://caseyho.dev/post/2023-02-04-can-not-find-roslyn-csc-exe-file/</link><pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2023-02-04-can-not-find-roslyn-csc-exe-file/</guid><description>錯誤訊息 找不到路徑 &amp;lsquo;D:\xxx\bin\roslyn\csc.exe&amp;rsquo; 的一部分。
解決方法 找到 packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.2.0.0
進入 tools
進入 Roslyn45
貼到專案的 Bin folder，並重新命名為 roslyn
再重啟專案，即可成功
參考資料 神祕的 ASP.NET bin\roslyn 目錄
[沒有蠢問題] 找不到路徑 bin\roslyn\csc.exe</description></item><item><title>在SSMS上刪除SQL Server Agent 失敗</title><link>https://caseyho.dev/post/2023-01-16-fail-to-delete-sql-server-agenet/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2023-01-16-fail-to-delete-sql-server-agenet/</guid><description>錯誤訊息 作業 &amp;lsquo;TEST.Subplan_1&amp;rsquo; 的 卸除 失敗。 (Microsoft.SqlServer.Smo) DELETE 陳述式與 REFERENCE 條件約束 &amp;ldquo;FK_subplan_job_id&amp;rdquo; 衝突。衝突發生在資料庫 &amp;ldquo;msdb&amp;rdquo;，資料表 &amp;ldquo;dbo.sysmaintplan_subplans&amp;rdquo;, column &amp;lsquo;job_id&amp;rsquo;。 陳述式已經結束。 (Microsoft SQL Server, 錯誤: 547)
解決方法 先找出要被刪除的 id 1 SELECT name, id FROM msdb.dbo.sysmaintplan_plans 再依序執行以下 SQL 1 2 3 DELETE FROM msdb.dbo.sysmaintplan_log WHERE plan_id = DELETE FROM msdb.dbo.sysmaintplan_subplans WHERE plan_id = DELETE FROM msdb.dbo.sysmaintplan_plans WHERE id = 再回到 SSMS 透過 UI 刪除該排程即可成功 參考資料 SQL Server - cannot drop idle job</description></item><item><title>如何壓縮 Transaction Log 檔案 | SQL</title><link>https://caseyho.dev/post/2022-11-11-how-to-compress-transaction-logs/</link><pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-11-11-how-to-compress-transaction-logs/</guid><description>方法 有 2 種方法
使用 SSMS 使用 TSQL TSQL 在資料庫按右鍵 &amp;gt; 屬性 &amp;gt; 復原模式
如果 DB 的復原模式使用「簡單」，直接使用 DBCC SHRINK 指令即可。
1 2 3 4 5 -- 找出 log 檔案名稱 SELECT name FROM sys.master_files WHERE type_desc = &amp;#39;LOG&amp;#39; -- AdventureWorks2012_log為壓縮的檔名 -- 1 為 AdventureWorks2012_log 壓縮到剩 1 MB DBCC SHRINKFILE (AdventureWorks2012_log, 1) 如果 DB 的復原模式使用「完整」，可以將復原模式從完整變成「簡單」後再壓縮檔案，壓縮檔案結束後再將復原模式調回完整。
1 2 3 4 5 6 7 8 9 10 -- 將復原模式變成「簡單」 ALTER DATABASE AdventureWorks2012 SET RECOVERY SIMPLE GO -- 壓縮檔案 DBCC SHRINKFILE (AdventureWorks2012_log, 1) GO -- 將復原模式變成「完整」 ALTER DATABASE AdventureWorks2012 SET RECOVERY FULL SSMS 資料庫按右鍵 &amp;gt; 工作(Tasks) &amp;gt; 壓縮(Shrink) &amp;gt; 檔案(Files) 檔案類型選擇紀錄檔 (log)，並選擇要壓縮的 log 檔的位置，壓縮動作可以自行選擇。 按下確定即可壓縮 log 檔 TSQL 1 2 3 4 5 6 7 8 USE [master]; GO -- 要備份的資料庫名稱 BACKUP DATABASE [SQLTestDB] TO DISK = N&amp;#39;Z:\SQLServerBackups\AdvWorksData.</description></item><item><title>The DELETE statement conflicted with the REFERENCE constraint "FK_subplan_job_id" | SQL</title><link>https://caseyho.dev/post/2022-11-10-the-delete-statemet-conflicted/</link><pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-11-10-the-delete-statemet-conflicted/</guid><description>錯誤訊息 &amp;ldquo;子計劃 缷除失敗&amp;rdquo;
delete 陳述式與reference 條件的約束&amp;rsquo;FK_subplan_job_id&amp;rsquo;衝突。衝突發生在資料庫
&amp;ldquo;msdb&amp;rdquo;,資料表 &amp;ldquo;dbo.sysmaintplan_subplans&amp;rdquo;,colum &amp;ldquo;job_id&amp;rdquo;。
英文版：
TITLE: Microsoft SQL Server Management Studio &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; Drop failed for Job &amp;lsquo;manual_db_backups.Subplan_1&amp;rsquo;. (Microsoft.SqlServer.Smo) For help, click: http://go.microsoft.com/fwlink?ProdName=Microsoft+SQL+Server&amp;amp;ProdVer=9.00.3042.00&amp;amp;EvtSrc=Microsoft.SqlServer.Management.Smo.ExceptionTemplates.FailedOperationExceptionText&amp;amp;EvtID=Drop+Job&amp;amp;LinkId=20476 &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; ADDITIONAL INFORMATION: An exception occurred while executing a Transact-SQL statement or batch. (Microsoft.SqlServer.ConnectionInfo) &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; The DELETE statement conflicted with the REFERENCE constraint &amp;ldquo;FK_subplan_job_id&amp;rdquo;. The conflict occurred in database &amp;ldquo;msdb&amp;rdquo;, table &amp;ldquo;dbo.sysmaintplan_subplans&amp;rdquo;, column &amp;lsquo;job_id&amp;rsquo;. The statement has been terminated. (Microsoft SQL Server, Error: 547) For help, click: http://go.</description></item><item><title>Dynamic Type 介紹 | c#</title><link>https://caseyho.dev/post/2022-10-24-dynamic-type-in-c-sharp/</link><pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-24-dynamic-type-in-c-sharp/</guid><description>前情提要 在 C# 4.0，有一個新的 Type 叫做 Dynamic Type。
Dynamic Type 不會在 compile time 做 checking，而是在 runtime 的時候編譯器才會知道該變數的 type ，並在 runtime 做 checking。
須注意事項 在大多數的時候，可以把 dynamic type 視為 object。 如果想要知道該變數在 runtime 的 type，可以使用 GetType()。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 using System; public class Program { public static void Main() { dynamic a = &amp;#34;this is a string&amp;#34;; dynamic b = 123234; Console.</description></item><item><title>檢查 date 是否為 null | c#</title><link>https://caseyho.dev/post/2022-10-24-check-date-is-null-date/</link><pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-24-check-date-is-null-date/</guid><description>Snippet 1 2 3 4 if (!datetime.HasValue) { //unassigned } 參考資料 [Checking to see if a DateTime variable has had a value assigned</description></item><item><title>The contextual keyword 'var' may only appear within a local variable declaration. | c#</title><link>https://caseyho.dev/post/2022-10-21-the-contextual-keyword-var-may-only-appear-within-a-local-variable-declaration/</link><pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-21-the-contextual-keyword-var-may-only-appear-within-a-local-variable-declaration/</guid><description>錯誤訊息 The contextual keyword &amp;lsquo;var&amp;rsquo; may only appear within a local variable declaration.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 using System; using System.Collections.Generic; using System.Web; using System.Text; using WebMatrix.Data; /// &amp;lt;summary&amp;gt; /// Summary description for ClassName /// &amp;lt;/summary&amp;gt; public class Base { public void CalculateTotalPriceInCart(var PartNumber, var Description, var OrderId, bool IsBoxed) { var database = Database.</description></item><item><title>保留原本 C# 的 Exception message，並加上客製化 Exception Message | c#</title><link>https://caseyho.dev/post/2022-10-19-add-a-message-to-an-exception-without-losing-any-information-in-c-sharp/</link><pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-19-add-a-message-to-an-exception-without-losing-any-information-in-c-sharp/</guid><description>假設現在程式拋出了一個 Exception，那麼我們看到的訊息應該會是 C# 預設寫好的錯誤訊息，但同時我們希望使用者需要知道這一個錯誤訊息，開發者應該可以將預設寫好的錯誤訊息變成使用者看得懂的東西。此時可以使用 Exception 的 Data 屬性。
Data 屬於 key/value pair，可以傳入自己想要的 key 和 value，可以使用以下 Exception.Data[key] 取到 Value。
範例 1 2 3 4 5 catch (Exception ex) { ex.Data.Add(&amp;#34;UserMessage&amp;#34;, &amp;#34;An error occurred while trying to load the XSLT file.&amp;#34;); throw; } 1 2 3 4 5 6 7 8 9 10 11 catch (Exception ex) { if (ex.Data.Contains(&amp;#34;UserMessage&amp;#34;)) { MessageBox.Show(ex.Data[&amp;#34;UserMessage&amp;#34;].ToString()); } else { MessageBox.Show(ex.Message); } } 參考資料 How can I add a message to an exception without losing any information in C#?</description></item><item><title>MSSQL Update Query | SQL</title><link>https://caseyho.dev/post/2022-09-27-mssql-update-query/</link><pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-09-27-mssql-update-query/</guid><description>不知道為什麼，每一次只要有 FROM 或是 INNER JOIN 在 UPDATE 裡面都會忘記怎麼寫，大概是寫的不夠多吧，特別筆記一下。
1 2 3 4 5 6 UPDATE A SET A.X = B.X FROM A INNER JOIN B ON A.ID = B.ID</description></item><item><title>使用 OPENQUERY 新增 Temp Table | SQL</title><link>https://caseyho.dev/post/2022-09-27-create-a-temp-table-with-openquery/</link><pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-09-27-create-a-temp-table-with-openquery/</guid><description>因為 CTE 無法使用 2 個以上的 QUERIES，所以使用 TEMP TABLE 代替 CTE。也因為資料量較大(有 20 多萬筆)，所以我選擇 TEMP TABLE，而不是 TABLE VARIABLE。
刪除 TEMP TABLE 將 SUB QUERY 的資料使用 SELECT &amp;hellip; INTO 加到 TEMP TABLE SELECT &amp;hellip; INTO 會 CREATE 一個 TEMP TABLE 並將資料 INSERT 到 TEMP TABLE 中
TEMP TABLE 的資料來源可以是別的 DATA SOURCE。例如：ORACLE
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 DROP TABLE IF EXISTS #TEMP_TABLE; SELECT INSERTED.</description></item><item><title>Disabled Input 傳至 Controller | JavaScript</title><link>https://caseyho.dev/post/2022-08-31-pass-disabled-input-to-controller/</link><pubDate>Wed, 31 Aug 2022 11:00:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-08-31-pass-disabled-input-to-controller/</guid><description>disabled input 是無法將 value 傳至 controller，但是我們仍需要用到 value，此時需要怎麼做?
解決辦法：
將 disabled input 塞進一個 id 或是 class。
在 submit form 的時候，使用 jQuery 的 removeAttr method，將 disabed 這一個屬性拿掉，這樣就可以在 controller 拿到 value 囉。
以下為 pseudo code，請參考。
1 @Html.CheckBoxFor(m =&amp;gt; m.isUsed, new { @disabled=&amp;#34;disabled&amp;#34;, @class=&amp;#34;disabledCheckbox&amp;#34;} ) 1 2 3 $(&amp;#34;#TestForm&amp;#34;).submit(function () { $(&amp;#34;#CheckBoxId&amp;#34;).removeAttr(&amp;#34;disabled&amp;#34;); }); 參考資料： How do I submit disabled input in ASP.NET MVC?</description></item><item><title>點擊 Enter 之後，執行某一支 Function | Vue.js</title><link>https://caseyho.dev/post/2022-08-29-use-enter-to-trigger-function-vue-js/</link><pubDate>Wed, 31 Aug 2022 11:00:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-08-29-use-enter-to-trigger-function-vue-js/</guid><description>JSFiddle 範例
使用 v-on:keyup.enter='function name' 綁定 input 或是 form。
起初寫的時候，以為 v-on:keyup.enter 要綁在 button 上，但是實際上其實是 form (或是其他的 input)， 以 form 為主體， trigger Enter 鍵之後，呼叫 login function，即可執行成功。
1 2 3 4 5 6 7 &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;form v-on:keyup.enter=&amp;#34;login&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; /&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; /&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; @click=&amp;#34;login&amp;#34;&amp;gt;Login&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/div&amp;gt; 1 2 3 4 5 6 7 8 new Vue({ el: &amp;#34;#app&amp;#34;, methods: { login() { alert(&amp;#34;CLICKED!&amp;#34;); }, }, }); 參考資料: On key press of Enter, click a button in vuejs</description></item><item><title>確認 input string 是否為數字 | JavaScript</title><link>https://caseyho.dev/post/2022-08-29-is-input-string-numeric/</link><pubDate>Mon, 29 Aug 2022 23:11:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-08-29-is-input-string-numeric/</guid><description>從 string data type 轉成 int 中間出的變化會非常多，有可能 input string 是空字串， input string 也有可能是 backctick&amp;hellip;等，一堆很奇怪的符號，這邊我使用我自己在專案中有使用的，並不保證大家都能夠判斷正確。
parseFloat(input string)
檢查是否為 NaN
如果是，則不是 Numeric Value
反之，則是 Numeric Value
1 2 3 4 5 6 7 function isNumeric(str) { if (typeof str != &amp;#34;string&amp;#34;) return false; // we only process strings! return ( !isNaN(str) &amp;amp;&amp;amp; // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)... !isNaN(parseFloat(str)) ); // .</description></item><item><title>List&lt;自定義的 class> 轉成以逗號分隔字串 | c#</title><link>https://caseyho.dev/post/2022-08-24-combine-attribute-with-list/</link><pubDate>Wed, 24 Aug 2022 16:14:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-08-24-combine-attribute-with-list/</guid><description>搭配 LINQ 和 string.Join()，將 List&amp;lt;自定義的 class&amp;gt; 轉成以逗號分隔字串。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 void Main() { // 新增一個 User List 叫做 result List&amp;lt;User&amp;gt; result = new List&amp;lt;User&amp;gt;(); // 加入 3 個 object 到 result，分別為 Sharon，John 和 Bobby result.Add(new User(1, &amp;#34;Sharon&amp;#34;, &amp;#34;User&amp;#34;, &amp;#34;sharon&amp;#34;)); result.Add(new User(2, &amp;#34;John&amp;#34;, &amp;#34;User&amp;#34;, &amp;#34;john&amp;#34;)); result.</description></item><item><title>2 陣列中找出至少有一個相同之元素 | JavaScript</title><link>https://caseyho.dev/post/2022-08-24-two-array-comparisions/</link><pubDate>Wed, 24 Aug 2022 14:14:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-08-24-two-array-comparisions/</guid><description>使用 Array.prototype.some() 和 Array.prototype.filter()，找出 2 個 array 至少有一個相同的元素。
some() 接收到的參數是一組公式，如果 array 的某一個元素有符合此公式，立即回傳 true，如遍歷整個 array 都找不到則回傳 false。
filter() 接收到的參數也是一組公式，不過跟 some() 不一樣的地方是 filter() 經過公式的運算後，會回傳一個新的陣列。
範例：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var result1 = [ { id: 1, name: &amp;#34;Sandra&amp;#34;, type: &amp;#34;user&amp;#34;, username: &amp;#34;sandra&amp;#34; }, { id: 2, name: &amp;#34;John&amp;#34;, type: &amp;#34;admin&amp;#34;, username: &amp;#34;johnny2&amp;#34; }, { id: 3, name: &amp;#34;Peter&amp;#34;, type: &amp;#34;user&amp;#34;, username: &amp;#34;pete&amp;#34; }, { id: 4, name: &amp;#34;Bobby&amp;#34;, type: &amp;#34;user&amp;#34;, username: &amp;#34;be_bob&amp;#34; }, ]; var result2 = [ { id: 2, name: &amp;#34;John&amp;#34;, email: &amp;#34;johnny@example.</description></item><item><title>排序後再 SELECT TOP N 筆資料</title><link>https://caseyho.dev/post/2022-07-13-oracle-sql-limit-number-of-rows-after-ordering/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-07-13-oracle-sql-limit-number-of-rows-after-ordering/</guid><description>寫法一：
1 2 3 4 5 6 7 SELECT * FROM ( SELECT * FROM TABLE_A ORDER BY TABLE_A.COLUMN_A DESC ) WHERE ROWNUM &amp;lt;= 5; 寫法二：
1 2 3 4 SELECT * FROM TABLE_A ORDER BY TABLE_A.COLUMN_A DESC OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY; 寫法三： (Ask Tom) 速度最快
1 2 3 4 5 6 7 SELECT * FROM ( SELECT a.*, ROWNUM rnum FROM ( SELECT * FROM TABLE_A ORDER BY TABLE_A.</description></item><item><title>定義變數</title><link>https://caseyho.dev/post/2022-07-11-define-variables-oracle-sql/</link><pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-07-11-define-variables-oracle-sql/</guid><description>目的 Oracle SQL 定義變數跟 SQL Server 的用法十分不一樣(踩到非常多坑啊 😭)，所以這一篇主要紀錄 Oracle SQL 定義變數 的 VARIABLE 和 DEFINE。
DEFINE 的 VARIABLE 的差別 DEFINE 的目的是替代變數，在 client 端執行解析，需要加入&amp;amp;在變數名稱前面，且必須要有變數名稱和預設值。不可以指定 data type，唯一的 data type 為 char。
語法：
DEFINE variable_name = value
VARIABLE 的目的是綁定變數，在 server 端執行解析，需要加入:在變數名稱前面，可以綁定多種 data type。
語法：
VARIABLE variable_name data_type
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 -- 先定義 VARIABLE variable_name data_type VARIABLE po_header_ids VARCHAR2(1000); -- 如果需要賦予預設值，必須在 variable_name 前面加入 :，也就是 :variable_name -- := 在 ORACLE SQL 表示 ASSIGN BEGIN :po_header_ids := &amp;#39;1,2,3&amp;#39;; END; / SELECT PHA.</description></item></channel></rss>