<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogging on Hugo Tania</title><link>https://caseyho.dev/categories/blogging/</link><description>Recent content in Blogging on Hugo Tania</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 21 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://caseyho.dev/categories/blogging/index.xml" rel="self" type="application/rss+xml"/><item><title>將多筆資料合併為一筆顯示 - FOR XML PATH | SQL</title><link>https://caseyho.dev/post/2022-11-21-merge-column-data-to-a-cell/</link><pubDate>Mon, 21 Nov 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-11-21-merge-column-data-to-a-cell/</guid><description>將多筆資料合併為一筆顯示FOR XML PATH | SQL 本篇使用 AdventureWorks2016 資料庫，將每一個產品的利用 FOR XML PATH 將評論人顯示多筆資料。
步驟 先找出要使用合併的資料 (通常在 detail page)，先鎖定 ProductID = 937，較容易寫出完整 query 1 2 3 4 SELECT &amp;#39;,&amp;#39; + [Production].[ProductReview].ReviewerName FROM [Production].[ProductReview] WHERE ProductID = 937 FOR XML PATH(&amp;#39;&amp;#39;) 可以看到評論 ProductId = 937 的人有 David 和 Jill
在每一個產品中，顯示各個產品的評論的人並使用 FOR XML PATH 顯示 將 WHERE ProductID = 937 拿掉 加入 [Production].[ProductReview].ProductID = [Product].ProductID 和 FROM [Production].[Product] 1 2 3 4 5 6 7 8 SELECT ProductID, ( SELECT &amp;#39;,&amp;#39; + [Production].</description></item><item><title>縮小 SSIS DB 檔案大小 | SSIS</title><link>https://caseyho.dev/post/2022-11-07-shrink-ssis-db-files/</link><pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-11-07-shrink-ssis-db-files/</guid><description>縮小 SSIS DB 檔案大小 將週期天數從預設的 365 天改到 30 天或其他更小的數字。 將 delete_batch_size 設定為 1000，預設為 10。
1 Alter procedure SSISDB.[internal].[cleanup_server_retention_window] SET @delete_batch_size = 1000 把以下 4 張 Table 做 Page 壓縮 1 2 3 4 5 6 7 8 USE [SSISDB] ALTER TABLE [internal].[event_messages] REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = PAGE) ALTER TABLE [internal].[operation_messages] REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = PAGE) ALTER TABLE [internal].[execution_component_phases] REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = PAGE) ALTER TABLE [internal].</description></item><item><title>CSS positioning 介紹 | css</title><link>https://caseyho.dev/post/2022-10-17-intro-to-css-positioning/</link><pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-17-intro-to-css-positioning/</guid><description>介紹 position 屬性用於 HTML 元素的定位方法，再搭配使用 top、bottom、left 和 right 屬性定位。
但是，除非首先設置了 position 屬性，否則 top、bottom、left 和 right 屬性將不起作用。
以下為 position 屬性值：
position: static position: relative position: fixed position: absolute position: sticky Static Positioning position: static 是 HTML 元素的預設值。
任何套用 position: static; 的元素「不會被特別定位」在頁面上特定位置，而是照著瀏覽器預設的設定自動排版在頁面上。
position: static; 的元素不受 top 、 right 、 bottom 和 left 屬性影響。
範例 CodePen
可以看到加上了 position: static;之後，元素依然在相同的位置。
Relative Positioning position: relative; 的元素和 position: static的元素 十分類似，position: relative;的元素可以讓開發者修改元素的最終位置。
position: relative; 的元素必須加上top 、 right 、 bottom 和 left 屬性，才能修改元素的最終位置，使元素相對於原本元素該出現的位置進行定位。</description></item><item><title>Hover div 的時候放大圖片 | css</title><link>https://caseyho.dev/post/2022-10-18-zoom-a-div-with-hover/</link><pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-18-zoom-a-div-with-hover/</guid><description>Hover div 的時候放大左右兩邊的圖片 此為我們要做的結果圖。
background-position background-position 用來設定背景圖片位置，如果只指定 x 軸位置，y 軸位置必定為 center。
1 background-position: x軸位置 y軸位置; 1 2 3 4 5 6 /* 靠左靠下對齊 */ background-position:left bottom;　/* 離左邊 30px，離上方 60px 的位置 */ background-position:30px 60px;　/* 離左邊 10%，離上方 50% 的位置 */ background-position:10% 50%;　CodePen 範例 CodePen
1 2 3 4 5 6 &amp;lt;div class=&amp;#34;wrapper&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;frame&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;frame&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;frame&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;frame&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 .</description></item><item><title>flex-shrink 屬性介紹 | css</title><link>https://caseyho.dev/post/2022-10-16-intro-to-flex-shrink/</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-16-intro-to-flex-shrink/</guid><description>介紹 flex-shrink 只適用於 flex item 上。
當使用 flex-shrink 時，如果 flex container 的長寬太小，設定 flex shrink 可以允許 flex item 縮小。 當 flex container 的寬度小於其中所有 flex item 的相加起來的寬度時，flex item 就會縮小。
flex-shrink 的屬性值為數字。數字越大，flex item 會縮小得越多。
例如有一個 flex item 的 flex-shrink: 1，而另一個 flex item 的 flex-shrnk: 3，則 flex-shrink: 3的 flex item 將縮小原本自己寬度四分之三， flex-shrink: 1 的 flex item 將縮小原本自己寬度四分之三。
flex-shrink 定義空間不夠時各個元素如何收縮。flex-shrink: 1 為預設值。
範例 CodePen
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 html { box-sizing: border-box; } .</description></item><item><title>PO - 採購單 | ORACLE ERP R12</title><link>https://caseyho.dev/post/2022-10-11-oracle-erp-ebs-r12-po-intro/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-11-oracle-erp-ebs-r12-po-intro/</guid><description>採購訂單 ORACLE 官方文件
PO_HEADERS_ALL 說明 採購訂單單頭 ，記錄向哪個供應商買東西。
主要資料 Columns 中文 AGENT_ID 採購員 SEGMENT1 採購單編號 PO_HEADER_ID 採購單 ID VENDOR_ID 供應商 ID VENDOR_SITE_ID 供應商地點 ID TERMS_ID 付款條件 TYPE_LOOKUP_CODE 採購單類型 主要相關 TABLE TABLE Data PO_AGENTS / PO_AGENTS_V 採購員 PO_VENDORS/ PO_VENDOR_SITES_ALL 供應商/供應商地點 AP_TERMS_TL 付款條件 PO_LINES_ALL 說明 採購訂單明細表 ，記錄向這個供應商買哪些東西，例如 item1，item2。
FOREIGN KEY PO_LINES_ALL.PO_HEADER_ID = PO_HEADERS_ALL.PO_HEADER_ID PO_LINE_LOCATIONS_ALL 說明 同一採購訂單行的品項可能會送去不同的地點，此表記錄物料送貨情況：
送貨到自己公司的兩個不同的收貨地點，如分別在台北和新竹收貨。
或者是同一收貨地點，但是兩個不同的送貨時間，如在新竹收貨，一批在 7 月收貨，一批在 8 月收貨。
表中還會記錄到收料、退料、開發票的數量情況。
FOREIGN KEY PO_LINE_LOCATIONS_ALL.PO_LINE_ID = PO_LINES_ALL.PO_LINE_ID PO_DISTRIBUTIONS_ALL 說明 分配的不同使得需要對應到不同的費用會計科目，或者費用需由不同的部門來承擔，則可在分配行中操作。 FOREIGN KEY PO_DISTRIBUTIONS_ALL.</description></item><item><title>如何讓 flex item 等高? | css</title><link>https://caseyho.dev/post/2022-10-09-an-equal-height-div-using-flexbox/</link><pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-09-an-equal-height-div-using-flexbox/</guid><description>CodePen 完成圖
步驟 Step 1 先畫出理想的 HTML Mark up，簡單來講分成 3 層，最外層紅色的 .container，橘色的 .card，和螢光綠的 .card__header，.card__body 和 .card__footer。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;card&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;card__header&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;https://source.</description></item><item><title>如何讓 image 塞進一個 div 裡面並維持解析度? | css</title><link>https://caseyho.dev/post/2022-10-03-how-to-remain-image-aspect-ratio-in-a-div/</link><pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-10-03-how-to-remain-image-aspect-ratio-in-a-div/</guid><description>範例 CodePen 範例
1 2 3 4 5 6 &amp;lt;div class=&amp;#34;img-wrap&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;https://images.unsplash.com/photo-1615147342761-9238e15d8b96?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1001&amp;amp;q=80&amp;#34; alt=&amp;#34;&amp;#34; /&amp;gt; &amp;lt;/div&amp;gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 body { display: flex; justify-content: center; align-items: center; width: 100vw; height: 100vh; margin: 0; padding: 0; } .img-wrap { border: 1px solid green; width: 50%; height: 50%; } .img-wrap img { width: 100%; height: 100%; object-fit: contain; } 解說 先設定圖片的容器的 width 和 height</description></item><item><title>SSIS ValidateExternalMetaData | SSIS</title><link>https://caseyho.dev/post/2022-09-30-ssis-validatemeta-data-attribute-intro/</link><pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-09-30-ssis-validatemeta-data-attribute-intro/</guid><description>說明 從打開封裝，拉 component，到執行封裝，這一段的過程都要驗證資料是否正確。
此圖為官方版說明。
如果 ValidateExternalMetadata = True，在設計封裝的時候， SSIS 就會連到外面的資料庫來比對資料正不正確，所以就會有紅色的 X。
設定 ValidateExternalMetadata = False，在設計封裝的時候， SSIS 就不會比對外部的資料正不正確，直到執行這一個 OLEDB 的時候才會驗證資料。</description></item><item><title>Clustered Index &amp; Non-Clustered Index | sql</title><link>https://caseyho.dev/post/2022-09-29-clustered-index-and-nonclustered-index-intro/</link><pubDate>Thu, 29 Sep 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-09-29-clustered-index-and-nonclustered-index-intro/</guid><description>INDEX 主要以下的特點：
Index 加快從 Table 或 View 中拿到資料的速度 Index 的值可以為一個或是多個值，這一些值會從 Table 或是 View 來的 Index 會存在一個資料結構叫做 B-tree 中 Index 可以分成 2 種：
CLUSTERED INDEX (叢集索引) NON-CLUSTERED INDEX (非叢集索引) CLUSTERED INDEX (叢集索引) Clustered Index 可以將 View 或是 Table 中的資料依照 Index 的 Value 排序後儲存 因為資料本身只能以一種順序排序，所以每個 Table 只能有一個 Clustered Index 只有當 Table 包含 Clustered Index 時，Table 中的資料才會以排序順序儲存 Table 有 Clustered Index 時，Table 又稱為 Clustered Table (叢集資料表) 如果 Table 沒有任何 Clustered Index，它的資料就儲存在未排序的資料結構中，這個資料結構稱為 Heap (堆積)。 Non-clustered Index (非叢集索引) Non-clustered Index 包含 Non-clustered Index Value (非叢集索引鍵值)， Non-clustered Index Value 可以是一個或是多個，為 Table 中的欄位。而每個 Non-clustered Index Value 都有一個 Pointer，指向包含 Non-clustered Index Value 的資料，也就是 Table 裡的欄位資料。 Non-clustered Index Value 的 Pointer 稱為 Row Locator (資料列定位器)。Row Locator 的資料結構須要看資料儲存是在 Heap 或 Clustered Table 而定。若是 Heap，Row Locator 是指向 Pointer。 若是 Clustered Table，Row Locator 就是 Clustered Index。 共通點 每當修改 Table 的資料時，就會自動維護資料表或檢視的索引。 Clustered Index 與 Non-clustered Index 都可以是 Unique 或是不是 Unique，Unique 表示資料值不能重複，不是 Unique 表示資料值可以重複。 Query Optimizer 如何使用 Index 建立好的 Index 可以降低磁碟 I/O 作業並耗用較少的系統資源，因此可改善查詢效能。 當執行 SELECT、UPDATE、DELETE 或 MERGE 時， Query Optimizer 會評估每個擷取資料的可用方法。 擷取資料的可用方法可以分成 2 種 Table Scan 掃描一個或是多個 Index Table Scan (資料表掃描) 當執行 Table Scan 時，Query Optimizer 可以讀取 Table 中的所有資料，並擷取符合查詢條件的資料列。 Table Scan 將產生許多磁碟 I/O 作業，而且可能需要大量資源。 使用 Index 掃描 當 Query Optimizer 使用 Index 掃描時，它會搜尋 Index Value 、尋找查詢所需的資料之儲存位置，並從該位置擷取符合的資料。 一般而言，搜尋 Index 會比搜尋 Table 更快。 參考資料 Clustered and Non-clustered indexes described</description></item><item><title>使用 SSIS 的 RetainSameConnection 屬性 | SSIS</title><link>https://caseyho.dev/post/2022-09-28-ssis-remainsameconnection-intro/</link><pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate><guid>https://caseyho.dev/post/2022-09-28-ssis-remainsameconnection-intro/</guid><description>RetainSameConnection 的預設值為 False，為什麼? 當RetainSameConnection=false，SSIS 的每個工作在開始使用和資料庫連線時才會打開連線，在工作結束時，關閉連線。
因此每個工作都會打開和關閉連線，且每個工作所使用的連線都是不同的。
以上面的圖片，執行 SQL 工作和資料流程工作的連線就會不是同一條，即便他們都是連到同一個資料庫。
當初的用意應該是如果執行 SQL 工作和資料流程工作用的是不同的資料庫連線，例如執行 SQL 工作連到的是 ORACLE DB，資料流程工作連到的是 SQL SERVER，當執行完執行 SQL 工作完成時，資料流程工作其實用不到 ORACLE 的連線，所以就會在完成執行 SQL 工作結束時關閉連線。
這也是合理的，因為有一些工作流程可能是打開檔案，發送信件，那麼打開檔案，發送信件這一些工作就不需要資料庫的連線，因此也不會浪費資源。
Temp Table 當RetainSameConnection=true，表示只要一執行封裝，連線就會打開，直到整個封裝執行結束。以剛剛的圖做舉例，如果我們在執行 SQL工作裡面新增一個 Temp Table，那麼資料流程工作也可以存取這一個 Temp Table，因為執行 SQL工作和資料流程工作連線是一樣的，資源還沒有被釋放掉，Temp Table 還會存在 DB 裡面。
但是如果RetainSameConnection=false，表示每一個的工作連線都是獨立的，如果在執行 SQL工作新增 Temp Table，資料流程工作就不會存取到這一個 Temp Table，因為 Temp Table 早就因為執行 SQL工作結束跟著一起被連線釋放掉。
參考資料 What is the RetainSameConnection Property of OLEDB Connection in SSIS?
使用 Connetion 的屬性 RetainSameConnection</description></item><item><title>String values are immutable | JavaScript</title><link>https://caseyho.dev/post/2022-09-04-string-immutable/</link><pubDate>Sun, 04 Sep 2022 23:12:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-09-04-string-immutable/</guid><description>在 JS 的世界裡面，string 是 immutable，表示 string 裡面的內容物是不可以變動的。 這是什麼意思，我們看以下的例子就知道。
範例 今天我們想要讓 string 這一個字串從 Jesse 變成 Aesse 該怎麼做?
以下步驟：
先設定一個變數叫做 student 將 student assign 給 Jesse 再將 student 的第 0 號位置變成 A 1 2 3 4 5 6 7 // 先設定一個變數叫做 student 並且 value 設為 Jesse let student = &amp;#34;Jesse&amp;#34;; console.log(student); // 將第 0 號位置重新assign，從 J 變成 A student[0] = &amp;#34;A&amp;#34;; console.log(student); 看到這心想應該是沒什麼問題吧，結果拿到 console 一跑，會發現 student 怎麼還是 Jesse?
會發生這種事情，是因為 string 有 immutabllity，裡面的任何字元都不可以變動。所以使用 student[0] assign 是行不通的。</description></item><item><title>var vs let - Part 1 | JavaScript</title><link>https://caseyho.dev/post/2022-09-01-var-let-differeneces/</link><pubDate>Thu, 01 Sep 2022 16:20:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-09-01-var-let-differeneces/</guid><description>自從 JS 在 2015 年推出大改版後，相信大家都看過非常多 var，let，const 的文章，雖然現已 2022，但有許多 legacy project 還是使用 var 來定義變數，就讓我們再了解一次 var 和 let 有何不同吧。
結論： 用 var 定義的變數可以輕易的被重新賦值，但是 let 不行。
1 2 3 var student = &amp;#34;Jesse&amp;#34;; var student = &amp;#34;Tracy&amp;#34;; console.log(student); 這一段程式碼，表示一開始 student 這一個變數是 assign 給 Jesse，但是下一行又將 student 變數 assign Tracy，console.log 出來的結果並沒有 error，是 log Tracy。
雖然這樣 assign 很方便，但是也增加 debug 的困難度，因為如果是大型專案，在寫得時候如果沒有注意到前面有使用，就容易將 variable 重新 assign。
所以 ES6 推出 let + const 希望能取代 var，增加 debug 的效率。
我們來看看如果使用 let 在 console 上，會發生什麼事?</description></item><item><title>設置 Git SSH key - Windows11 版本 | Git</title><link>https://caseyho.dev/post/2022-08-27-setup-ssh-key-win11/</link><pubDate>Sat, 27 Aug 2022 23:11:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-08-27-setup-ssh-key-win11/</guid><description>設置步驟 這一篇主要紀錄設定 Github 的 SSH key - Windows 11 版本
安裝 Git ：下載網址 git --version
如果不確定電腦有沒有安裝 Git，可以使用 git --version 確認，如果有，會顯示安裝的版本，如果沒有，請去官網下載，基本上只要一直按下一步即可。
產生 SSH key 為 4 個步驟。
ssh-keygen 按下 Enter - 使用預設路徑，檔案 按下 Enter - 不使用密碼保護私鑰 按下 Enter - 確認上述動作 使用 ssh-keygen 可以產生 SSH key ，接下來會被問到你想要把 SSH key 放在哪一個 file，直接按下 Enter，即是放在預設路徑，檔案。
完成檔案新增後，會要求輸入 passphrase，passphrase 就是密碼，這一個密碼可以用來保護私鑰，雖然設置密碼保護私鑰能多一層的保障，但是每一次執行 Git 時就會被要求輸入密碼，這倒是一大缺點，這裡我不使用密碼。
按下 Enter 後會被要求再輸入一次密碼，如果剛剛沒有設定密碼，直接按 Enter，反之打上剛剛設定的密碼。
如果有看到像是亂碼的東西，表示 SSH Key 已經新增成功，如要看 SSH Key 放在哪一個檔案，可以到 C 槽的使用者底下有一個 .ssh 的資料夾，點開後就會有檔案 (假設使用的是預設路徑)。</description></item><item><title>AD 驗證有可能造成資安問題嗎?</title><link>https://caseyho.dev/post/2022-08-19-is-attacking-available-when-using-ad-login-auth/</link><pubDate>Fri, 19 Aug 2022 21:14:00 +0800</pubDate><guid>https://caseyho.dev/post/2022-08-19-is-attacking-available-when-using-ad-login-auth/</guid><description>有一天我被我主管問到這件事，若企業網站使用 AD 驗證方式登入帳密，使用 POST 的方式將未加密的帳密傳至伺服器中，整個過程都是使用內網，有沒有可能會被壞人竊取帳號密碼? (假設沒有惡意主動攻擊的狀況下)
上網查了之後發現，應該是不太可能的，原因如下：
企業網站登入流程如下：
會先啟用 SSL
到入登入頁面
使用者輸入帳密
密碼傳至 API 做驗證
在這過程中帳密皆會以 SSL 加密的方式送出，如果壞人在這中間擷取封包，所拿到的東西也都是加密過後的東西，當然 HTTPS 或是 SSL 並不保證是安全的，所以如果再進一步破解，也是有可能竊取帳密，但並不會這麼容易的讓壞人將密碼看透透。
資安的世界其實很複雜，攻擊的一方一定會站的比較上風，大部分的東西放在網路上其實都不安全，最安全是手寫放在保險箱(哈哈)，但目前企業都在推動數位轉型，很多資料都會放在網路上做彙整，我們只能做最壞的打算，進行最大的防護。
如有不同的想法，歡迎留言討論。
參考資料： HTTPS 的連線夠安全嗎？</description></item></channel></rss>